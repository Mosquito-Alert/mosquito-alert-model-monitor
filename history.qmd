---
title: "Job History"
format: html
---

```{r setup, include=FALSE}
library(DT)
library(plotly)
library(jsonlite)
library(lubridate)
library(dplyr)
library(purrr)
library(stringr)
library(ggplot2)

# Source the shared functions
source("scripts/dashboard_functions.R")
```

# Job Execution History

This page shows historical trends and patterns in job execution over time.

```{r load-history, echo=FALSE, message=FALSE, warning=FALSE}
# Load historical data from both history files and current status
history_files <- list.files("data/history", pattern = "*.json", full.names = TRUE)
status_files <- list.files("data/status", pattern = "*.json", full.names = TRUE)

# Function to safely load JSON files
safe_load_json <- function(file) {
  tryCatch({
    data <- fromJSON(file, flatten = TRUE)
    
    # Convert to data frame if it's not already
    if (!is.data.frame(data)) {
      df <- data.frame(
        job_name = data$job_name %||% tools::file_path_sans_ext(basename(file)),
        status = data$status %||% "unknown",
        last_updated = as.character(data$last_updated %||% data$start_time %||% file.info(file)$mtime),
        duration = as.numeric(data$duration %||% 0),
        progress = as.numeric(data$progress %||% 0),
        stringsAsFactors = FALSE
      )
    } else {
      df <- data
      # Ensure consistent column types
      if ("last_updated" %in% names(df)) {
        df$last_updated <- as.character(df$last_updated)
      }
      if ("duration" %in% names(df)) {
        df$duration <- as.numeric(df$duration)
      }
      if ("progress" %in% names(df)) {
        df$progress <- as.numeric(df$progress)
      }
    }
    
    df$source_file <- basename(file)
    df$file_date <- file.info(file)$mtime
    return(df)
  }, error = function(e) {
    return(data.frame())
  })
}

# Load history files
history_data <- data.frame()
if (length(history_files) > 0) {
  history_list <- map(history_files, safe_load_json)
  history_data <- bind_rows(history_list[lengths(history_list) > 0])
}

# Load current status for recent activity
current_data <- data.frame()
if (length(status_files) > 0) {
  status_list <- map(status_files, safe_load_json)
  current_data <- bind_rows(status_list[lengths(status_list) > 0])
  current_data$source_type <- "current"
}

# Combine historical and current data
all_data <- bind_rows(
  if(nrow(history_data) > 0) mutate(history_data, source_type = "history") else data.frame(),
  current_data
)

if (nrow(all_data) == 0) {
  cat("**No historical data available yet.**\n\n")
  cat("History will accumulate as jobs run and complete. Check back after some jobs have executed.\n")
} else {
  # Clean and standardize the data
  all_data <- all_data %>%
    mutate(
      last_updated = as_datetime(ifelse(
        !is.na(last_updated) & last_updated != "", 
        last_updated, 
        as.character(file_date)
      )),
      duration_minutes = round(duration / 60, 1),
      status = factor(status, levels = c("completed", "running", "failed", "pending", "unknown")),
      job_name = as.factor(job_name)
    ) %>%
    filter(!is.na(last_updated)) %>%
    arrange(desc(last_updated))
  
  cat(paste("**Total Records:**", nrow(all_data), "\n"))
  cat(paste("**Date Range:**", 
            format(min(all_data$last_updated, na.rm = TRUE), "%Y-%m-%d"), 
            "to", 
            format(max(all_data$last_updated, na.rm = TRUE), "%Y-%m-%d"), "\n\n"))
}
```

## Recent Job Activity

```{r recent-jobs, echo=FALSE}
if (nrow(all_data) > 0) {
  # Show recent job executions
  recent_jobs <- all_data %>%
    head(20) %>%
    select(job_name, status, last_updated, duration_minutes, progress) %>%
    mutate(
      last_updated = format(last_updated, "%Y-%m-%d %H:%M"),
      duration = ifelse(duration_minutes > 0, paste(duration_minutes, "min"), "N/A"),
      progress = paste0(progress, "%")
    ) %>%
    select(-duration_minutes)
  
  datatable(recent_jobs, 
            options = list(pageLength = 10, scrollX = TRUE),
            caption = "Most Recent Job Executions") %>%
    formatStyle("status",
                backgroundColor = styleEqual(
                  c("completed", "running", "failed", "pending"), 
                  c("#d4edda", "#cce5ff", "#f8d7da", "#fff3cd")
                ))
} else {
  cat("No recent job data available.\n")
}
```

## Job Success Rates

```{r success-rates, echo=FALSE}
if (nrow(all_data) > 0) {
  # Calculate success rates by job
  success_summary <- all_data %>%
    group_by(job_name) %>%
    summarise(
      total_runs = n(),
      completed = sum(status == "completed", na.rm = TRUE),
      failed = sum(status == "failed", na.rm = TRUE),
      success_rate = round(completed / total_runs * 100, 1),
      avg_duration_min = round(mean(duration / 60, na.rm = TRUE), 1),
      last_run = max(last_updated, na.rm = TRUE),
      .groups = "drop"
    ) %>%
    arrange(desc(total_runs))
  
  datatable(success_summary,
            options = list(pageLength = 10),
            caption = "Job Success Rates and Performance") %>%
    formatStyle("success_rate",
                backgroundColor = styleInterval(c(80, 95), c("#f8d7da", "#fff3cd", "#d4edda")))
} else {
  cat("No data available for success rate analysis.\n")
}
```

## Performance Trends

```{r performance-trends, echo=FALSE, fig.width=10, fig.height=6}
if (nrow(all_data) > 0 && sum(!is.na(all_data$duration)) > 0) {
  # Plot duration trends over time
  trend_data <- all_data %>%
    filter(!is.na(duration) & duration > 0) %>%
    mutate(date = as.Date(last_updated))
  
  p <- ggplot(trend_data, aes(x = last_updated, y = duration / 60, color = job_name)) +
    geom_line(alpha = 0.7) +
    geom_point(aes(shape = status), size = 2) +
    labs(
      title = "Job Duration Trends Over Time",
      x = "Date",
      y = "Duration (minutes)",
      color = "Job",
      shape = "Status"
    ) +
    theme_minimal() +
    scale_color_brewer(type = "qual", palette = "Set2")
  
  ggplotly(p)
} else {
  cat("Insufficient data for performance trend analysis.\n")
}
```

## Status Distribution

```{r status-distribution, echo=FALSE, fig.width=8, fig.height=6}
if (nrow(all_data) > 0) {
  # Status distribution by job
  status_data <- all_data %>%
    count(job_name, status) %>%
    group_by(job_name) %>%
    mutate(percentage = round(n / sum(n) * 100, 1))
  
  p <- ggplot(status_data, aes(x = job_name, y = n, fill = status)) +
    geom_col(position = "stack") +
    labs(
      title = "Job Status Distribution",
      x = "Job Name",
      y = "Number of Executions",
      fill = "Status"
    ) +
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
    scale_fill_manual(values = c(
      "completed" = "#28a745",
      "running" = "#007bff", 
      "failed" = "#dc3545",
      "pending" = "#ffc107",
      "unknown" = "#6c757d"
    ))
  
  ggplotly(p)
} else {
  cat("No data available for status distribution.\n")
}
```

## Execution Timeline

```{r timeline, echo=FALSE, message=FALSE, warning=FALSE}
if (nrow(all_data) > 0) {
  # Create timeline plot
  p_timeline <- all_data %>%
    ggplot(aes(x = last_updated, y = job_name, color = status)) +
    geom_point(aes(size = duration_minutes), alpha = 0.7) +
    scale_color_manual(
      values = c(
        "completed" = "#4caf50",
        "failed" = "#f44336", 
        "running" = "#2196f3",
        "pending" = "#ffc107",
        "unknown" = "#9e9e9e"
      )
    ) +
    scale_size_continuous(name = "Duration (min)", range = c(2, 8)) +
    theme_minimal() +
    theme(
      axis.text.y = element_text(size = 10),
      legend.position = "bottom"
    ) +
    labs(
      title = "Job Execution Timeline",
      x = "Time",
      y = "Job Name",
      color = "Status"
    )
  
  ggplotly(p_timeline, tooltip = c("x", "y", "colour", "size"))
} else {
  cat("No historical data to display timeline.\n")
}
```

## Daily Job Summary

```{r daily-summary, echo=FALSE, message=FALSE, warning=FALSE}
if (nrow(all_data) > 0) {
  # Daily aggregation
  daily_summary <- all_data %>%
    mutate(date_recorded = as.Date(last_updated)) %>%
    group_by(date_recorded, job_name) %>%
    summarise(
      total_runs = n(),
      successful_runs = sum(status == "completed"),
      failed_runs = sum(status == "failed"),
      avg_duration = round(mean(duration_minutes, na.rm = TRUE), 2),
      success_rate = round(successful_runs / total_runs * 100, 1),
      .groups = 'drop'
    )
  
  # Success rate over time
  p_success <- daily_summary %>%
    ggplot(aes(x = date_recorded, y = success_rate, color = job_name)) +
    geom_line(size = 1) +
    geom_point(aes(size = total_runs)) +
    scale_y_continuous(limits = c(0, 100)) +
    theme_minimal() +
    labs(
      title = "Job Success Rate Over Time",
      x = "Date",
      y = "Success Rate (%)",
      color = "Job Name",
      size = "Total Runs"
    )
  
  ggplotly(p_success, tooltip = c("x", "y", "colour", "size"))
}
```

## Historical Performance Analysis

```{r historical-performance, echo=FALSE, message=FALSE, warning=FALSE}
if (nrow(all_data) > 0) {
  # Duration trends
  p_duration <- all_data %>%
    filter(status %in% c("completed", "failed")) %>%
    ggplot(aes(x = last_updated, y = duration_minutes, color = job_name)) +
    geom_point(alpha = 0.6) +
    geom_smooth(method = "loess", se = FALSE) +
    theme_minimal() +
    labs(
      title = "Job Duration Trends",
      x = "Time",
      y = "Duration (minutes)",
      color = "Job Name"
    )
  
  ggplotly(p_duration, tooltip = c("x", "y", "colour"))
}
```

## Historical Statistics Table

```{r history-table, echo=FALSE, message=FALSE, warning=FALSE}
if (nrow(all_data) > 0) {
  # Comprehensive statistics
  stats_summary <- all_data %>%
    group_by(job_name) %>%
    summarise(
      total_executions = n(),
      successful = sum(status == "completed"),
      failed = sum(status == "failed"),
      success_rate = round(successful / total_executions * 100, 1),
      avg_duration = round(mean(duration_minutes, na.rm = TRUE), 2),
      min_duration = round(min(duration_minutes, na.rm = TRUE), 2),
      max_duration = round(max(duration_minutes, na.rm = TRUE), 2),
      first_run = min(last_updated, na.rm = TRUE),
      last_run = max(last_updated, na.rm = TRUE),
      .groups = 'drop'
    ) %>%
    mutate(
      first_run = format(first_run, "%Y-%m-%d %H:%M"),
      last_run = format(last_run, "%Y-%m-%d %H:%M")
    ) %>%
    rename(
      "Job Name" = job_name,
      "Total Runs" = total_executions,
      "Successful" = successful,
      "Failed" = failed,
      "Success Rate (%)" = success_rate,
      "Avg Duration (min)" = avg_duration,
      "Min Duration (min)" = min_duration,
      "Max Duration (min)" = max_duration,
      "First Run" = first_run,
      "Last Run" = last_run
    )
  
  DT::datatable(
    stats_summary,
    caption = "Historical Job Statistics",
    options = list(
      pageLength = 10,
      scrollX = TRUE,
      columnDefs = list(
        list(className = 'dt-center', targets = '_all')
      )
    ),
    rownames = FALSE
  ) %>%
    DT::formatStyle(
      'Success Rate (%)',
      backgroundColor = DT::styleInterval(
        cuts = c(80, 95),
        values = c('#ffebee', '#fff3e0', '#e8f5e8')
      )
    )
}
```

## Recent Activity Log

```{r recent-activity, echo=FALSE, message=FALSE, warning=FALSE}
if (nrow(all_data) > 0) {
  # Show last 50 job executions
  recent_activity <- all_data %>%
    arrange(desc(last_updated)) %>%
    head(50) %>%
    mutate(
      duration_formatted = paste0(round(duration_minutes, 1), " min"),
      timestamp_formatted = format(last_updated, "%Y-%m-%d %H:%M:%S")
    ) %>%
    select(
      "Job Name" = job_name,
      "Status" = status,
      "Timestamp" = timestamp_formatted,
      "Duration" = duration_formatted,
      "Progress (%)" = progress
    )
  
  DT::datatable(
    recent_activity,
    caption = "Recent Job Executions (Last 50)",
    options = list(
      pageLength = 15,
      order = list(list(2, 'desc')),  # Sort by timestamp descending
      columnDefs = list(
        list(className = 'dt-center', targets = '_all')
      )
    ),
    rownames = FALSE
  ) %>%
    DT::formatStyle(
      'Status',
      backgroundColor = DT::styleEqual(
        c('completed', 'running', 'failed', 'pending', 'unknown'),
        c('#e8f5e8', '#e3f2fd', '#ffebee', '#fff3e0', '#f5f5f5')
      )
    )
} else {
  cat("No recent activity to display.\n")
}
```

---

*Page last updated: `r Sys.time()`*
