[
  {
    "objectID": "jobs.html",
    "href": "jobs.html",
    "title": "Job Details",
    "section": "",
    "text": "This page provides detailed analysis and configuration information for all monitored jobs.\n\n\nFound 5 jobs with status data\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo log entries available.\n\n\n\nPage last updated: 2025-08-22 13:01:52.981814"
  },
  {
    "objectID": "jobs.html#job-configuration-details",
    "href": "jobs.html#job-configuration-details",
    "title": "Job Details",
    "section": "",
    "text": "Code\nif (nrow(jobs_data) &gt; 0) {\n  # Extract and display job configurations\n  config_details &lt;- jobs_data %&gt;%\n    select(job_name, status, last_updated, project_type, frequency, priority, data_source, collection_scope)\n  \n  # Display configuration table\n  DT::datatable(\n    config_details,\n    caption = \"Job Configuration Details\",\n    options = list(\n      pageLength = 10,\n      scrollX = TRUE,\n      columnDefs = list(\n        list(className = 'dt-center', targets = '_all')\n      )\n    ),\n    rownames = FALSE\n  ) %&gt;%\n    DT::formatStyle(\n      'priority',\n      backgroundColor = DT::styleEqual(\n        c('CRITICAL', 'MEDIUM', 'LOW'),\n        c('#ffebee', '#fff3e0', '#e8f5e8')\n      )\n    ) %&gt;%\n    DT::formatStyle(\n      'status',\n      backgroundColor = DT::styleEqual(\n        c('completed', 'running', 'failed', 'waiting'),\n        c('#e8f5e8', '#e3f2fd', '#ffebee', '#f5f5f5')\n      )\n    )\n}"
  },
  {
    "objectID": "jobs.html#resource-usage-analysis",
    "href": "jobs.html#resource-usage-analysis",
    "title": "Job Details",
    "section": "",
    "text": "Code\nif (nrow(jobs_data) &gt; 0) {\n  # Resource usage plot\n  p_resources &lt;- jobs_data %&gt;%\n    filter(!is.na(cpu_usage) | !is.na(memory_usage)) %&gt;%\n    select(job_name, cpu_usage, memory_usage) %&gt;%\n    tidyr::pivot_longer(\n      cols = c(cpu_usage, memory_usage),\n      names_to = \"resource_type\",\n      values_to = \"usage\"\n    ) %&gt;%\n    mutate(\n      resource_type = case_when(\n        resource_type == \"cpu_usage\" ~ \"CPU Usage (%)\",\n        resource_type == \"memory_usage\" ~ \"Memory Usage (MB)\",\n        TRUE ~ resource_type\n      )\n    ) %&gt;%\n    ggplot(aes(x = job_name, y = usage, fill = resource_type)) +\n    geom_col(position = \"dodge\") +\n    facet_wrap(~resource_type, scales = \"free_y\") +\n    theme_minimal() +\n    theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n    labs(\n      title = \"Resource Usage by Job\",\n      x = \"Job Name\",\n      y = \"Usage\",\n      fill = \"Resource Type\"\n    )\n  \n  ggplotly(p_resources, tooltip = c(\"x\", \"y\"))\n}"
  },
  {
    "objectID": "jobs.html#job-performance-metrics",
    "href": "jobs.html#job-performance-metrics",
    "title": "Job Details",
    "section": "",
    "text": "Code\nif (nrow(jobs_data) &gt; 0) {\n  # Performance summary\n  performance_summary &lt;- jobs_data %&gt;%\n    group_by(job_name) %&gt;%\n    summarise(\n      avg_duration = round(mean(duration, na.rm = TRUE) / 60, 2),\n      max_duration = round(max(duration, na.rm = TRUE) / 60, 2),\n      avg_cpu = round(mean(cpu_usage, na.rm = TRUE), 1),\n      avg_memory = round(mean(memory_usage, na.rm = TRUE), 1),\n      last_status = first(status),\n      .groups = 'drop'\n    ) %&gt;%\n    rename(\n      \"Job Name\" = job_name,\n      \"Avg Duration (min)\" = avg_duration,\n      \"Max Duration (min)\" = max_duration,\n      \"Avg CPU (%)\" = avg_cpu,\n      \"Avg Memory (MB)\" = avg_memory,\n      \"Current Status\" = last_status\n    )\n  \n  DT::datatable(\n    performance_summary,\n    caption = \"Job Performance Summary\",\n    options = list(\n      pageLength = 10,\n      columnDefs = list(\n        list(className = 'dt-center', targets = '_all')\n      )\n    ),\n    rownames = FALSE\n  ) %&gt;%\n    DT::formatStyle(\n      'Current Status',\n      backgroundColor = DT::styleEqual(\n        c('completed', 'running', 'failed', 'waiting'),\n        c('#e8f5e8', '#e3f2fd', '#ffebee', '#f5f5f5')\n      )\n    )\n}"
  },
  {
    "objectID": "jobs.html#scheduling-information",
    "href": "jobs.html#scheduling-information",
    "title": "Job Details",
    "section": "",
    "text": "Code\nif (nrow(jobs_data) &gt; 0) {\n  # Next scheduled runs\n  schedule_info &lt;- jobs_data %&gt;%\n    select(job_name, next_scheduled_run, last_updated) %&gt;%\n    mutate(\n      next_run_parsed = as_datetime(next_scheduled_run),\n      last_updated_parsed = as_datetime(last_updated),\n      time_until_next = as.numeric(next_run_parsed - Sys.time()),\n      status_text = case_when(\n        is.na(next_run_parsed) ~ \"No schedule set\",\n        time_until_next &lt; 0 ~ \"Overdue\",\n        time_until_next &lt; 3600 ~ paste(round(time_until_next/60), \"min\"),\n        time_until_next &lt; 86400 ~ paste(round(time_until_next/3600, 1), \"hrs\"),\n        TRUE ~ paste(round(time_until_next/86400, 1), \"days\")\n      )\n    ) %&gt;%\n    select(\n      \"Job Name\" = job_name,\n      \"Last Updated\" = last_updated,\n      \"Next Scheduled\" = next_scheduled_run,\n      \"Time Until Next\" = status_text\n    )\n  \n  DT::datatable(\n    schedule_info,\n    caption = \"Job Scheduling Information\",\n    options = list(\n      pageLength = 10,\n      columnDefs = list(\n        list(className = 'dt-center', targets = '_all')\n      )\n    ),\n    rownames = FALSE\n  )\n}"
  },
  {
    "objectID": "jobs.html#log-analysis",
    "href": "jobs.html#log-analysis",
    "title": "Job Details",
    "section": "",
    "text": "No log entries available.\n\n\n\nPage last updated: 2025-08-22 13:01:52.981814"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Mosquito Alert Model Monitor",
    "section": "",
    "text": "Total Jobs: 5\n\n\nRunning: 0\n\n\nCompleted: 2\n\n\nFailed: 3\n\n\n\nLast updated: 2025-08-22 13:01:46"
  },
  {
    "objectID": "index.html#overview",
    "href": "index.html#overview",
    "title": "Mosquito Alert Model Monitor",
    "section": "",
    "text": "Total Jobs: 5\n\n\nRunning: 0\n\n\nCompleted: 2\n\n\nFailed: 3\n\n\n\nLast updated: 2025-08-22 13:01:46"
  },
  {
    "objectID": "index.html#resource-usage",
    "href": "index.html#resource-usage",
    "title": "Mosquito Alert Model Monitor",
    "section": "Resource Usage",
    "text": "Resource Usage"
  },
  {
    "objectID": "index.html#recent-activity",
    "href": "index.html#recent-activity",
    "title": "Mosquito Alert Model Monitor",
    "section": "Recent Activity",
    "text": "Recent Activity"
  },
  {
    "objectID": "index.html#performance-summary",
    "href": "index.html#performance-summary",
    "title": "Mosquito Alert Model Monitor",
    "section": "Performance Summary",
    "text": "Performance Summary"
  },
  {
    "objectID": "alerts.html",
    "href": "alerts.html",
    "title": "Alerts & Monitoring",
    "section": "",
    "text": "This page provides automated alerts and monitoring for job failures, performance issues, and system status.\n\n\nCode\n# Load current job status\njobs_data &lt;- load_job_status()\n\n\nWarning in value[[3L]](cond): Error reading\ndata/status/mosquito_model_data_prep.json : replacement has 3 rows, data has 1\n\n\nCode\n# Load historical data for trend analysis\nhistory_files &lt;- list.files(\"data/history\", pattern = \"*.json\", full.names = TRUE)\nhistory_data &lt;- data.frame()\n\nif (length(history_files) &gt; 0) {\n  history_data &lt;- map_dfr(history_files, function(file) {\n    tryCatch({\n      data &lt;- fromJSON(file, flatten = TRUE)\n      if (is.data.frame(data) && nrow(data) &gt; 0) {\n        data$date_file &lt;- basename(tools::file_path_sans_ext(file))\n        return(data)\n      }\n      return(data.frame())\n    }, error = function(e) {\n      data.frame()\n    })\n  })\n  \n  if (nrow(history_data) &gt; 0) {\n    history_data &lt;- history_data %&gt;%\n      mutate(\n        timestamp = as_datetime(timestamp),\n        duration = as.numeric(duration),\n        progress = as.numeric(progress),\n        date_recorded = as.Date(date_file)\n      )\n  }\n}\n\n# Generate alerts\ncurrent_time &lt;- Sys.time()\nalerts &lt;- list()\n\n\n\n\n\n\nCode\nif (nrow(jobs_data) &gt; 0) {\n  # Check for failed jobs\n  failed_jobs &lt;- jobs_data %&gt;% filter(status == \"failed\")\n  \n  # Check for overdue jobs\n  overdue_jobs &lt;- jobs_data %&gt;%\n    filter(!is.na(next_scheduled_run)) %&gt;%\n    mutate(next_run = as_datetime(next_scheduled_run)) %&gt;%\n    filter(next_run &lt; current_time & status != \"running\") %&gt;%\n    mutate(delay_hours = round(as.numeric(current_time - next_run) / 3600, 1))\n  \n  # Check for long-running jobs (&gt;2 hours)\n  long_running &lt;- jobs_data %&gt;%\n    filter(status == \"running\", duration &gt; 7200) %&gt;%\n    mutate(runtime_hours = round(duration / 3600, 1))\n  \n  # Check for high resource usage\n  high_resource &lt;- jobs_data %&gt;%\n    filter(cpu_usage &gt; 90 | memory_usage &gt; 8000) %&gt;%\n    mutate(\n      high_cpu = cpu_usage &gt; 90,\n      high_memory = memory_usage &gt; 8000\n    )\n  \n  # Compile alerts\n  alert_summary &lt;- data.frame(\n    Alert_Type = character(),\n    Job_Name = character(), \n    Severity = character(),\n    Description = character(),\n    Action_Required = character(),\n    stringsAsFactors = FALSE\n  )\n  \n  # Add failed job alerts\n  if (nrow(failed_jobs) &gt; 0) {\n    for (i in 1:nrow(failed_jobs)) {\n      alert_summary &lt;- rbind(alert_summary, data.frame(\n        Alert_Type = \"Job Failure\",\n        Job_Name = failed_jobs$job_name[i],\n        Severity = \"HIGH\",\n        Description = paste(\"Job failed at\", failed_jobs$last_updated[i]),\n        Action_Required = \"Check logs and restart job\",\n        stringsAsFactors = FALSE\n      ))\n    }\n  }\n  \n  # Add overdue job alerts\n  if (nrow(overdue_jobs) &gt; 0) {\n    for (i in 1:nrow(overdue_jobs)) {\n      severity &lt;- if (overdue_jobs$delay_hours[i] &gt; 24) \"HIGH\" else \"MEDIUM\"\n      alert_summary &lt;- rbind(alert_summary, data.frame(\n        Alert_Type = \"Overdue Job\",\n        Job_Name = overdue_jobs$job_name[i],\n        Severity = severity,\n        Description = paste(\"Job overdue by\", overdue_jobs$delay_hours[i], \"hours\"),\n        Action_Required = \"Check job scheduler and system status\",\n        stringsAsFactors = FALSE\n      ))\n    }\n  }\n  \n  # Add long-running alerts\n  if (nrow(long_running) &gt; 0) {\n    for (i in 1:nrow(long_running)) {\n      alert_summary &lt;- rbind(alert_summary, data.frame(\n        Alert_Type = \"Long Running\",\n        Job_Name = long_running$job_name[i],\n        Severity = \"MEDIUM\",\n        Description = paste(\"Job running for\", long_running$runtime_hours[i], \"hours\"),\n        Action_Required = \"Monitor progress and consider intervention\",\n        stringsAsFactors = FALSE\n      ))\n    }\n  }\n  \n  # Add resource usage alerts\n  if (nrow(high_resource) &gt; 0) {\n    for (i in 1:nrow(high_resource)) {\n      issues &lt;- c()\n      if (high_resource$high_cpu[i]) issues &lt;- c(issues, paste(\"CPU:\", round(high_resource$cpu_usage[i], 1), \"%\"))\n      if (high_resource$high_memory[i]) issues &lt;- c(issues, paste(\"Memory:\", round(high_resource$memory_usage[i], 0), \"MB\"))\n      \n      alert_summary &lt;- rbind(alert_summary, data.frame(\n        Alert_Type = \"High Resource Usage\",\n        Job_Name = high_resource$job_name[i],\n        Severity = \"MEDIUM\",\n        Description = paste(\"High resource usage:\", paste(issues, collapse = \", \")),\n        Action_Required = \"Monitor system performance\",\n        stringsAsFactors = FALSE\n      ))\n    }\n  }\n  \n  # Display alerts table\n  if (nrow(alert_summary) &gt; 0) {\n    DT::datatable(\n      alert_summary,\n      caption = paste(\"Active Alerts (\", nrow(alert_summary), \"total)\"),\n      options = list(\n        pageLength = 10,\n        order = list(list(2, 'desc')),  # Sort by severity\n        columnDefs = list(\n          list(className = 'dt-center', targets = '_all')\n        )\n      ),\n      rownames = FALSE\n    ) %&gt;%\n      DT::formatStyle(\n        'Severity',\n        backgroundColor = DT::styleEqual(\n          c('HIGH', 'MEDIUM', 'LOW'),\n          c('#ffebee', '#fff3e0', '#e8f5e8')\n        )\n      ) %&gt;%\n      DT::formatStyle(\n        'Alert_Type',\n        backgroundColor = DT::styleEqual(\n          c('Job Failure', 'Overdue Job', 'Long Running', 'High Resource Usage'),\n          c('#ffcdd2', '#ffe0b2', '#f8bbd9', '#dcedc1')\n        )\n      )\n  } else {\n    cat(\"✅ **No active alerts** - All systems operating normally!\\n\\n\")\n  }\n} else {\n  cat(\"No job data available for alert monitoring.\\n\")\n}\n\n\n\n\n\n\n\n\n\n\n\nCode\nif (nrow(jobs_data) &gt; 0) {\n  # Calculate system health metrics\n  total_jobs &lt;- nrow(jobs_data)\n  running_jobs &lt;- sum(jobs_data$status == \"running\")\n  completed_jobs &lt;- sum(jobs_data$status == \"completed\")\n  failed_jobs &lt;- sum(jobs_data$status == \"failed\")\n  waiting_jobs &lt;- sum(jobs_data$status == \"waiting\")\n  \n  # Overall system health score\n  health_score &lt;- round((completed_jobs + running_jobs) / total_jobs * 100, 1)\n  \n  # Create health summary\n  health_summary &lt;- data.frame(\n    Metric = c(\"Total Jobs\", \"Running\", \"Completed\", \"Failed\", \"Waiting\", \"System Health Score\"),\n    Value = c(total_jobs, running_jobs, completed_jobs, failed_jobs, waiting_jobs, paste(health_score, \"%\")),\n    Status = c(\n      \"Info\", \n      if (running_jobs &gt; 0) \"Good\" else \"Info\",\n      if (completed_jobs &gt; 0) \"Good\" else \"Info\", \n      if (failed_jobs &gt; 0) \"Warning\" else \"Good\",\n      \"Info\",\n      if (health_score &gt;= 90) \"Excellent\" else if (health_score &gt;= 70) \"Good\" else \"Warning\"\n    )\n  )\n  \n  DT::datatable(\n    health_summary,\n    caption = \"System Health Overview\",\n    options = list(\n      pageLength = 10,\n      columnDefs = list(\n        list(className = 'dt-center', targets = '_all')\n      )\n    ),\n    rownames = FALSE\n  ) %&gt;%\n    DT::formatStyle(\n      'Status',\n      backgroundColor = DT::styleEqual(\n        c('Excellent', 'Good', 'Warning', 'Info'),\n        c('#e8f5e8', '#e3f2fd', '#fff3e0', '#f5f5f5')\n      )\n    )\n}\n\n\n\n\n\n\n\n\n\n\n\nCode\nif (nrow(history_data) &gt; 0) {\n  # Recent performance trends (last 7 days)\n  recent_data &lt;- history_data %&gt;%\n    filter(timestamp &gt;= (current_time - days(7)))\n  \n  if (nrow(recent_data) &gt; 0) {\n    # Failure rate trend\n    daily_failures &lt;- recent_data %&gt;%\n      mutate(date = as.Date(timestamp)) %&gt;%\n      group_by(date, job_name) %&gt;%\n      summarise(\n        total_runs = n(),\n        failures = sum(status == \"failed\"),\n        failure_rate = round(failures / total_runs * 100, 1),\n        .groups = 'drop'\n      )\n    \n    # Plot failure rates\n    if (nrow(daily_failures) &gt; 0) {\n      p_failures &lt;- daily_failures %&gt;%\n        ggplot(aes(x = date, y = failure_rate, color = job_name)) +\n        geom_line(size = 1) +\n        geom_point(aes(size = total_runs)) +\n        scale_y_continuous(limits = c(0, max(100, max(daily_failures$failure_rate, na.rm = TRUE)))) +\n        theme_minimal() +\n        labs(\n          title = \"Job Failure Rate - Last 7 Days\",\n          x = \"Date\",\n          y = \"Failure Rate (%)\",\n          color = \"Job Name\",\n          size = \"Total Runs\"\n        )\n      \n      ggplotly(p_failures, tooltip = c(\"x\", \"y\", \"colour\", \"size\"))\n    }\n  }\n}\n\n\n\n\n\n\n\nCode\nrecommendations &lt;- data.frame(\n  Priority = character(),\n  Recommendation = character(),\n  Reason = character(),\n  stringsAsFactors = FALSE\n)\n\nif (nrow(jobs_data) &gt; 0) {\n  # Check for jobs that haven't run recently\n  stale_jobs &lt;- jobs_data %&gt;%\n    mutate(last_updated_time = as_datetime(last_updated)) %&gt;%\n    filter(last_updated_time &lt; (current_time - hours(24))) %&gt;%\n    mutate(hours_since = round(as.numeric(current_time - last_updated_time) / 3600, 1))\n  \n  if (nrow(stale_jobs) &gt; 0) {\n    for (i in 1:nrow(stale_jobs)) {\n      recommendations &lt;- rbind(recommendations, data.frame(\n        Priority = \"Medium\",\n        Recommendation = paste(\"Check\", stale_jobs$job_name[i], \"job status\"),\n        Reason = paste(\"No updates for\", stale_jobs$hours_since[i], \"hours\"),\n        stringsAsFactors = FALSE\n      ))\n    }\n  }\n  \n  # Check for consistently slow jobs\n  if (nrow(history_data) &gt; 0) {\n    slow_jobs &lt;- history_data %&gt;%\n      filter(timestamp &gt;= (current_time - days(7))) %&gt;%\n      group_by(job_name) %&gt;%\n      summarise(\n        avg_duration = mean(duration, na.rm = TRUE),\n        median_duration = median(duration, na.rm = TRUE),\n        .groups = 'drop'\n      ) %&gt;%\n      filter(avg_duration &gt; 3600)  # More than 1 hour average\n    \n    if (nrow(slow_jobs) &gt; 0) {\n      for (i in 1:nrow(slow_jobs)) {\n        recommendations &lt;- rbind(recommendations, data.frame(\n          Priority = \"Low\",\n          Recommendation = paste(\"Optimize\", slow_jobs$job_name[i], \"performance\"),\n          Reason = paste(\"Average runtime:\", round(slow_jobs$avg_duration[i]/60, 1), \"minutes\"),\n          stringsAsFactors = FALSE\n        ))\n      }\n    }\n  }\n  \n  # General maintenance recommendations\n  recommendations &lt;- rbind(recommendations, data.frame(\n    Priority = \"Low\",\n    Recommendation = \"Review log files for any warning messages\",\n    Reason = \"Regular maintenance best practice\",\n    stringsAsFactors = FALSE\n  ))\n  \n  recommendations &lt;- rbind(recommendations, data.frame(\n    Priority = \"Low\", \n    Recommendation = \"Archive old historical data (&gt;30 days)\",\n    Reason = \"Optimize dashboard performance\",\n    stringsAsFactors = FALSE\n  ))\n}\n\nif (nrow(recommendations) &gt; 0) {\n  DT::datatable(\n    recommendations,\n    caption = \"System Maintenance Recommendations\",\n    options = list(\n      pageLength = 10,\n      columnDefs = list(\n        list(className = 'dt-center', targets = '_all')\n      )\n    ),\n    rownames = FALSE\n  ) %&gt;%\n    DT::formatStyle(\n      'Priority',\n      backgroundColor = DT::styleEqual(\n        c('High', 'Medium', 'Low'),\n        c('#ffebee', '#fff3e0', '#e8f5e8')\n      )\n    )\n} else {\n  cat(\"No maintenance recommendations at this time.\\n\")\n}\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Display current alert thresholds\nalert_config &lt;- data.frame(\n  Alert_Type = c(\n    \"Job Failure\",\n    \"Overdue Jobs\", \n    \"Long Running Jobs\",\n    \"High CPU Usage\",\n    \"High Memory Usage\",\n    \"System Health Score\"\n  ),\n  Threshold = c(\n    \"Any failed status\",\n    \"&gt; 1 hour past scheduled time\",\n    \"&gt; 2 hours runtime\",\n    \"&gt; 90% CPU usage\",\n    \"&gt; 8GB memory usage\", \n    \"&lt; 70% overall health\"\n  ),\n  Current_Action = c(\n    \"Display alert in dashboard\",\n    \"Display alert in dashboard\",\n    \"Display alert in dashboard\", \n    \"Display alert in dashboard\",\n    \"Display alert in dashboard\",\n    \"Display alert in dashboard\"\n  )\n)\n\nDT::datatable(\n  alert_config,\n  caption = \"Alert Configuration & Thresholds\",\n  options = list(\n    pageLength = 10,\n    columnDefs = list(\n      list(className = 'dt-center', targets = '_all')\n    )\n  ),\n  rownames = FALSE\n)\n\n\n\n\n\n\n\nPage last updated: 2025-08-22 12:32:06.475167\nNote: This monitoring system provides basic alerting through the dashboard. For production use, consider integrating with external alerting systems (email, Slack, etc.) for immediate notifications."
  },
  {
    "objectID": "alerts.html#active-alerts",
    "href": "alerts.html#active-alerts",
    "title": "Alerts & Monitoring",
    "section": "",
    "text": "Code\nif (nrow(jobs_data) &gt; 0) {\n  # Check for failed jobs\n  failed_jobs &lt;- jobs_data %&gt;% filter(status == \"failed\")\n  \n  # Check for overdue jobs\n  overdue_jobs &lt;- jobs_data %&gt;%\n    filter(!is.na(next_scheduled_run)) %&gt;%\n    mutate(next_run = as_datetime(next_scheduled_run)) %&gt;%\n    filter(next_run &lt; current_time & status != \"running\") %&gt;%\n    mutate(delay_hours = round(as.numeric(current_time - next_run) / 3600, 1))\n  \n  # Check for long-running jobs (&gt;2 hours)\n  long_running &lt;- jobs_data %&gt;%\n    filter(status == \"running\", duration &gt; 7200) %&gt;%\n    mutate(runtime_hours = round(duration / 3600, 1))\n  \n  # Check for high resource usage\n  high_resource &lt;- jobs_data %&gt;%\n    filter(cpu_usage &gt; 90 | memory_usage &gt; 8000) %&gt;%\n    mutate(\n      high_cpu = cpu_usage &gt; 90,\n      high_memory = memory_usage &gt; 8000\n    )\n  \n  # Compile alerts\n  alert_summary &lt;- data.frame(\n    Alert_Type = character(),\n    Job_Name = character(), \n    Severity = character(),\n    Description = character(),\n    Action_Required = character(),\n    stringsAsFactors = FALSE\n  )\n  \n  # Add failed job alerts\n  if (nrow(failed_jobs) &gt; 0) {\n    for (i in 1:nrow(failed_jobs)) {\n      alert_summary &lt;- rbind(alert_summary, data.frame(\n        Alert_Type = \"Job Failure\",\n        Job_Name = failed_jobs$job_name[i],\n        Severity = \"HIGH\",\n        Description = paste(\"Job failed at\", failed_jobs$last_updated[i]),\n        Action_Required = \"Check logs and restart job\",\n        stringsAsFactors = FALSE\n      ))\n    }\n  }\n  \n  # Add overdue job alerts\n  if (nrow(overdue_jobs) &gt; 0) {\n    for (i in 1:nrow(overdue_jobs)) {\n      severity &lt;- if (overdue_jobs$delay_hours[i] &gt; 24) \"HIGH\" else \"MEDIUM\"\n      alert_summary &lt;- rbind(alert_summary, data.frame(\n        Alert_Type = \"Overdue Job\",\n        Job_Name = overdue_jobs$job_name[i],\n        Severity = severity,\n        Description = paste(\"Job overdue by\", overdue_jobs$delay_hours[i], \"hours\"),\n        Action_Required = \"Check job scheduler and system status\",\n        stringsAsFactors = FALSE\n      ))\n    }\n  }\n  \n  # Add long-running alerts\n  if (nrow(long_running) &gt; 0) {\n    for (i in 1:nrow(long_running)) {\n      alert_summary &lt;- rbind(alert_summary, data.frame(\n        Alert_Type = \"Long Running\",\n        Job_Name = long_running$job_name[i],\n        Severity = \"MEDIUM\",\n        Description = paste(\"Job running for\", long_running$runtime_hours[i], \"hours\"),\n        Action_Required = \"Monitor progress and consider intervention\",\n        stringsAsFactors = FALSE\n      ))\n    }\n  }\n  \n  # Add resource usage alerts\n  if (nrow(high_resource) &gt; 0) {\n    for (i in 1:nrow(high_resource)) {\n      issues &lt;- c()\n      if (high_resource$high_cpu[i]) issues &lt;- c(issues, paste(\"CPU:\", round(high_resource$cpu_usage[i], 1), \"%\"))\n      if (high_resource$high_memory[i]) issues &lt;- c(issues, paste(\"Memory:\", round(high_resource$memory_usage[i], 0), \"MB\"))\n      \n      alert_summary &lt;- rbind(alert_summary, data.frame(\n        Alert_Type = \"High Resource Usage\",\n        Job_Name = high_resource$job_name[i],\n        Severity = \"MEDIUM\",\n        Description = paste(\"High resource usage:\", paste(issues, collapse = \", \")),\n        Action_Required = \"Monitor system performance\",\n        stringsAsFactors = FALSE\n      ))\n    }\n  }\n  \n  # Display alerts table\n  if (nrow(alert_summary) &gt; 0) {\n    DT::datatable(\n      alert_summary,\n      caption = paste(\"Active Alerts (\", nrow(alert_summary), \"total)\"),\n      options = list(\n        pageLength = 10,\n        order = list(list(2, 'desc')),  # Sort by severity\n        columnDefs = list(\n          list(className = 'dt-center', targets = '_all')\n        )\n      ),\n      rownames = FALSE\n    ) %&gt;%\n      DT::formatStyle(\n        'Severity',\n        backgroundColor = DT::styleEqual(\n          c('HIGH', 'MEDIUM', 'LOW'),\n          c('#ffebee', '#fff3e0', '#e8f5e8')\n        )\n      ) %&gt;%\n      DT::formatStyle(\n        'Alert_Type',\n        backgroundColor = DT::styleEqual(\n          c('Job Failure', 'Overdue Job', 'Long Running', 'High Resource Usage'),\n          c('#ffcdd2', '#ffe0b2', '#f8bbd9', '#dcedc1')\n        )\n      )\n  } else {\n    cat(\"✅ **No active alerts** - All systems operating normally!\\n\\n\")\n  }\n} else {\n  cat(\"No job data available for alert monitoring.\\n\")\n}"
  },
  {
    "objectID": "alerts.html#system-health-overview",
    "href": "alerts.html#system-health-overview",
    "title": "Alerts & Monitoring",
    "section": "",
    "text": "Code\nif (nrow(jobs_data) &gt; 0) {\n  # Calculate system health metrics\n  total_jobs &lt;- nrow(jobs_data)\n  running_jobs &lt;- sum(jobs_data$status == \"running\")\n  completed_jobs &lt;- sum(jobs_data$status == \"completed\")\n  failed_jobs &lt;- sum(jobs_data$status == \"failed\")\n  waiting_jobs &lt;- sum(jobs_data$status == \"waiting\")\n  \n  # Overall system health score\n  health_score &lt;- round((completed_jobs + running_jobs) / total_jobs * 100, 1)\n  \n  # Create health summary\n  health_summary &lt;- data.frame(\n    Metric = c(\"Total Jobs\", \"Running\", \"Completed\", \"Failed\", \"Waiting\", \"System Health Score\"),\n    Value = c(total_jobs, running_jobs, completed_jobs, failed_jobs, waiting_jobs, paste(health_score, \"%\")),\n    Status = c(\n      \"Info\", \n      if (running_jobs &gt; 0) \"Good\" else \"Info\",\n      if (completed_jobs &gt; 0) \"Good\" else \"Info\", \n      if (failed_jobs &gt; 0) \"Warning\" else \"Good\",\n      \"Info\",\n      if (health_score &gt;= 90) \"Excellent\" else if (health_score &gt;= 70) \"Good\" else \"Warning\"\n    )\n  )\n  \n  DT::datatable(\n    health_summary,\n    caption = \"System Health Overview\",\n    options = list(\n      pageLength = 10,\n      columnDefs = list(\n        list(className = 'dt-center', targets = '_all')\n      )\n    ),\n    rownames = FALSE\n  ) %&gt;%\n    DT::formatStyle(\n      'Status',\n      backgroundColor = DT::styleEqual(\n        c('Excellent', 'Good', 'Warning', 'Info'),\n        c('#e8f5e8', '#e3f2fd', '#fff3e0', '#f5f5f5')\n      )\n    )\n}"
  },
  {
    "objectID": "alerts.html#performance-monitoring",
    "href": "alerts.html#performance-monitoring",
    "title": "Alerts & Monitoring",
    "section": "",
    "text": "Code\nif (nrow(history_data) &gt; 0) {\n  # Recent performance trends (last 7 days)\n  recent_data &lt;- history_data %&gt;%\n    filter(timestamp &gt;= (current_time - days(7)))\n  \n  if (nrow(recent_data) &gt; 0) {\n    # Failure rate trend\n    daily_failures &lt;- recent_data %&gt;%\n      mutate(date = as.Date(timestamp)) %&gt;%\n      group_by(date, job_name) %&gt;%\n      summarise(\n        total_runs = n(),\n        failures = sum(status == \"failed\"),\n        failure_rate = round(failures / total_runs * 100, 1),\n        .groups = 'drop'\n      )\n    \n    # Plot failure rates\n    if (nrow(daily_failures) &gt; 0) {\n      p_failures &lt;- daily_failures %&gt;%\n        ggplot(aes(x = date, y = failure_rate, color = job_name)) +\n        geom_line(size = 1) +\n        geom_point(aes(size = total_runs)) +\n        scale_y_continuous(limits = c(0, max(100, max(daily_failures$failure_rate, na.rm = TRUE)))) +\n        theme_minimal() +\n        labs(\n          title = \"Job Failure Rate - Last 7 Days\",\n          x = \"Date\",\n          y = \"Failure Rate (%)\",\n          color = \"Job Name\",\n          size = \"Total Runs\"\n        )\n      \n      ggplotly(p_failures, tooltip = c(\"x\", \"y\", \"colour\", \"size\"))\n    }\n  }\n}"
  },
  {
    "objectID": "alerts.html#maintenance-recommendations",
    "href": "alerts.html#maintenance-recommendations",
    "title": "Alerts & Monitoring",
    "section": "",
    "text": "Code\nrecommendations &lt;- data.frame(\n  Priority = character(),\n  Recommendation = character(),\n  Reason = character(),\n  stringsAsFactors = FALSE\n)\n\nif (nrow(jobs_data) &gt; 0) {\n  # Check for jobs that haven't run recently\n  stale_jobs &lt;- jobs_data %&gt;%\n    mutate(last_updated_time = as_datetime(last_updated)) %&gt;%\n    filter(last_updated_time &lt; (current_time - hours(24))) %&gt;%\n    mutate(hours_since = round(as.numeric(current_time - last_updated_time) / 3600, 1))\n  \n  if (nrow(stale_jobs) &gt; 0) {\n    for (i in 1:nrow(stale_jobs)) {\n      recommendations &lt;- rbind(recommendations, data.frame(\n        Priority = \"Medium\",\n        Recommendation = paste(\"Check\", stale_jobs$job_name[i], \"job status\"),\n        Reason = paste(\"No updates for\", stale_jobs$hours_since[i], \"hours\"),\n        stringsAsFactors = FALSE\n      ))\n    }\n  }\n  \n  # Check for consistently slow jobs\n  if (nrow(history_data) &gt; 0) {\n    slow_jobs &lt;- history_data %&gt;%\n      filter(timestamp &gt;= (current_time - days(7))) %&gt;%\n      group_by(job_name) %&gt;%\n      summarise(\n        avg_duration = mean(duration, na.rm = TRUE),\n        median_duration = median(duration, na.rm = TRUE),\n        .groups = 'drop'\n      ) %&gt;%\n      filter(avg_duration &gt; 3600)  # More than 1 hour average\n    \n    if (nrow(slow_jobs) &gt; 0) {\n      for (i in 1:nrow(slow_jobs)) {\n        recommendations &lt;- rbind(recommendations, data.frame(\n          Priority = \"Low\",\n          Recommendation = paste(\"Optimize\", slow_jobs$job_name[i], \"performance\"),\n          Reason = paste(\"Average runtime:\", round(slow_jobs$avg_duration[i]/60, 1), \"minutes\"),\n          stringsAsFactors = FALSE\n        ))\n      }\n    }\n  }\n  \n  # General maintenance recommendations\n  recommendations &lt;- rbind(recommendations, data.frame(\n    Priority = \"Low\",\n    Recommendation = \"Review log files for any warning messages\",\n    Reason = \"Regular maintenance best practice\",\n    stringsAsFactors = FALSE\n  ))\n  \n  recommendations &lt;- rbind(recommendations, data.frame(\n    Priority = \"Low\", \n    Recommendation = \"Archive old historical data (&gt;30 days)\",\n    Reason = \"Optimize dashboard performance\",\n    stringsAsFactors = FALSE\n  ))\n}\n\nif (nrow(recommendations) &gt; 0) {\n  DT::datatable(\n    recommendations,\n    caption = \"System Maintenance Recommendations\",\n    options = list(\n      pageLength = 10,\n      columnDefs = list(\n        list(className = 'dt-center', targets = '_all')\n      )\n    ),\n    rownames = FALSE\n  ) %&gt;%\n    DT::formatStyle(\n      'Priority',\n      backgroundColor = DT::styleEqual(\n        c('High', 'Medium', 'Low'),\n        c('#ffebee', '#fff3e0', '#e8f5e8')\n      )\n    )\n} else {\n  cat(\"No maintenance recommendations at this time.\\n\")\n}"
  },
  {
    "objectID": "alerts.html#alert-configuration",
    "href": "alerts.html#alert-configuration",
    "title": "Alerts & Monitoring",
    "section": "",
    "text": "Code\n# Display current alert thresholds\nalert_config &lt;- data.frame(\n  Alert_Type = c(\n    \"Job Failure\",\n    \"Overdue Jobs\", \n    \"Long Running Jobs\",\n    \"High CPU Usage\",\n    \"High Memory Usage\",\n    \"System Health Score\"\n  ),\n  Threshold = c(\n    \"Any failed status\",\n    \"&gt; 1 hour past scheduled time\",\n    \"&gt; 2 hours runtime\",\n    \"&gt; 90% CPU usage\",\n    \"&gt; 8GB memory usage\", \n    \"&lt; 70% overall health\"\n  ),\n  Current_Action = c(\n    \"Display alert in dashboard\",\n    \"Display alert in dashboard\",\n    \"Display alert in dashboard\", \n    \"Display alert in dashboard\",\n    \"Display alert in dashboard\",\n    \"Display alert in dashboard\"\n  )\n)\n\nDT::datatable(\n  alert_config,\n  caption = \"Alert Configuration & Thresholds\",\n  options = list(\n    pageLength = 10,\n    columnDefs = list(\n      list(className = 'dt-center', targets = '_all')\n    )\n  ),\n  rownames = FALSE\n)\n\n\n\n\n\n\n\nPage last updated: 2025-08-22 12:32:06.475167\nNote: This monitoring system provides basic alerting through the dashboard. For production use, consider integrating with external alerting systems (email, Slack, etc.) for immediate notifications."
  },
  {
    "objectID": "history.html",
    "href": "history.html",
    "title": "Job History",
    "section": "",
    "text": "This page shows historical trends and patterns in job execution over time.\n\n\nCode\n# Load historical data\nhistory_files &lt;- list.files(\"data/history\", pattern = \"*.json\", full.names = TRUE)\n\nif (length(history_files) == 0) {\n  cat(\"No historical data available yet. History will accumulate as jobs run.\\n\")\n  history_data &lt;- data.frame()\n} else {\n  # Load and combine all history files\n  history_data &lt;- map_dfr(history_files, function(file) {\n    tryCatch({\n      data &lt;- fromJSON(file, flatten = TRUE)\n      if (is.data.frame(data) && nrow(data) &gt; 0) {\n        data$date_file &lt;- basename(tools::file_path_sans_ext(file))\n        return(data)\n      }\n      return(data.frame())\n    }, error = function(e) {\n      data.frame()\n    })\n  })\n  \n  if (nrow(history_data) &gt; 0) {\n    # Clean and standardize the data\n    history_data &lt;- history_data %&gt;%\n      mutate(\n        timestamp = as_datetime(timestamp),\n        duration = as.numeric(duration),\n        progress = as.numeric(progress),\n        date_recorded = as.Date(date_file)\n      )\n    \n    cat(\"Loaded\", nrow(history_data), \"historical job records from\", length(history_files), \"days\\n\")\n  }\n}\n\n\n\n\n\n\nCode\nif (nrow(history_data) &gt; 0) {\n  # Create timeline plot\n  p_timeline &lt;- history_data %&gt;%\n    ggplot(aes(x = timestamp, y = job_name, color = status)) +\n    geom_point(aes(size = duration/60), alpha = 0.7) +\n    scale_color_manual(\n      values = c(\n        \"completed\" = \"#4caf50\",\n        \"failed\" = \"#f44336\", \n        \"running\" = \"#2196f3\",\n        \"waiting\" = \"#9e9e9e\"\n      )\n    ) +\n    scale_size_continuous(name = \"Duration (min)\", range = c(2, 8)) +\n    theme_minimal() +\n    theme(\n      axis.text.y = element_text(size = 10),\n      legend.position = \"bottom\"\n    ) +\n    labs(\n      title = \"Job Execution Timeline\",\n      x = \"Time\",\n      y = \"Job Name\",\n      color = \"Status\"\n    )\n  \n  ggplotly(p_timeline, tooltip = c(\"x\", \"y\", \"colour\", \"size\"))\n} else {\n  cat(\"No historical data to display timeline.\\n\")\n}\n\n\nNo historical data to display timeline.\n\n\n\n\n\n\n\nCode\nif (nrow(history_data) &gt; 0) {\n  # Daily aggregation\n  daily_summary &lt;- history_data %&gt;%\n    group_by(date_recorded, job_name) %&gt;%\n    summarise(\n      total_runs = n(),\n      successful_runs = sum(status == \"completed\"),\n      failed_runs = sum(status == \"failed\"),\n      avg_duration = round(mean(duration, na.rm = TRUE) / 60, 2),\n      success_rate = round(successful_runs / total_runs * 100, 1),\n      .groups = 'drop'\n    )\n  \n  # Success rate over time\n  p_success &lt;- daily_summary %&gt;%\n    ggplot(aes(x = date_recorded, y = success_rate, color = job_name)) +\n    geom_line(size = 1) +\n    geom_point(aes(size = total_runs)) +\n    scale_y_continuous(limits = c(0, 100)) +\n    theme_minimal() +\n    labs(\n      title = \"Job Success Rate Over Time\",\n      x = \"Date\",\n      y = \"Success Rate (%)\",\n      color = \"Job Name\",\n      size = \"Total Runs\"\n    )\n  \n  ggplotly(p_success, tooltip = c(\"x\", \"y\", \"colour\", \"size\"))\n}\n\n\n\n\n\n\n\nCode\nif (nrow(history_data) &gt; 0) {\n  # Duration trends\n  p_duration &lt;- history_data %&gt;%\n    filter(status %in% c(\"completed\", \"failed\")) %&gt;%\n    ggplot(aes(x = timestamp, y = duration/60, color = job_name)) +\n    geom_point(alpha = 0.6) +\n    geom_smooth(method = \"loess\", se = FALSE) +\n    theme_minimal() +\n    labs(\n      title = \"Job Duration Trends\",\n      x = \"Time\",\n      y = \"Duration (minutes)\",\n      color = \"Job Name\"\n    )\n  \n  ggplotly(p_duration, tooltip = c(\"x\", \"y\", \"colour\"))\n}\n\n\n\n\n\n\n\nCode\nif (nrow(history_data) &gt; 0) {\n  # Comprehensive statistics\n  stats_summary &lt;- history_data %&gt;%\n    group_by(job_name) %&gt;%\n    summarise(\n      total_executions = n(),\n      successful = sum(status == \"completed\"),\n      failed = sum(status == \"failed\"),\n      success_rate = round(successful / total_executions * 100, 1),\n      avg_duration = round(mean(duration, na.rm = TRUE) / 60, 2),\n      min_duration = round(min(duration, na.rm = TRUE) / 60, 2),\n      max_duration = round(max(duration, na.rm = TRUE) / 60, 2),\n      first_run = min(timestamp, na.rm = TRUE),\n      last_run = max(timestamp, na.rm = TRUE),\n      .groups = 'drop'\n    ) %&gt;%\n    mutate(\n      first_run = format(first_run, \"%Y-%m-%d %H:%M\"),\n      last_run = format(last_run, \"%Y-%m-%d %H:%M\")\n    ) %&gt;%\n    rename(\n      \"Job Name\" = job_name,\n      \"Total Runs\" = total_executions,\n      \"Successful\" = successful,\n      \"Failed\" = failed,\n      \"Success Rate (%)\" = success_rate,\n      \"Avg Duration (min)\" = avg_duration,\n      \"Min Duration (min)\" = min_duration,\n      \"Max Duration (min)\" = max_duration,\n      \"First Run\" = first_run,\n      \"Last Run\" = last_run\n    )\n  \n  DT::datatable(\n    stats_summary,\n    caption = \"Historical Job Statistics\",\n    options = list(\n      pageLength = 10,\n      scrollX = TRUE,\n      columnDefs = list(\n        list(className = 'dt-center', targets = '_all')\n      )\n    ),\n    rownames = FALSE\n  ) %&gt;%\n    DT::formatStyle(\n      'Success Rate (%)',\n      backgroundColor = DT::styleInterval(\n        cuts = c(80, 95),\n        values = c('#ffebee', '#fff3e0', '#e8f5e8')\n      )\n    )\n}\n\n\n\n\n\n\n\nCode\nif (nrow(history_data) &gt; 0) {\n  # Show last 50 job executions\n  recent_activity &lt;- history_data %&gt;%\n    arrange(desc(timestamp)) %&gt;%\n    head(50) %&gt;%\n    mutate(\n      duration_formatted = format_duration(duration),\n      timestamp_formatted = format(timestamp, \"%Y-%m-%d %H:%M:%S\")\n    ) %&gt;%\n    select(\n      \"Job Name\" = job_name,\n      \"Status\" = status,\n      \"Timestamp\" = timestamp_formatted,\n      \"Duration\" = duration_formatted,\n      \"Progress (%)\" = progress\n    )\n  \n  DT::datatable(\n    recent_activity,\n    caption = \"Recent Job Executions (Last 50)\",\n    options = list(\n      pageLength = 15,\n      order = list(list(2, 'desc')),  # Sort by timestamp descending\n      columnDefs = list(\n        list(className = 'dt-center', targets = '_all')\n      )\n    ),\n    rownames = FALSE\n  ) %&gt;%\n    DT::formatStyle(\n      'Status',\n      backgroundColor = DT::styleEqual(\n        c('completed', 'running', 'failed', 'waiting'),\n        c('#e8f5e8', '#e3f2fd', '#ffebee', '#f5f5f5')\n      )\n    )\n} else {\n  cat(\"No recent activity to display.\\n\")\n}\n\n\nNo recent activity to display.\n\n\n\nPage last updated: 2025-08-22 12:32:09.291364"
  },
  {
    "objectID": "history.html#execution-timeline",
    "href": "history.html#execution-timeline",
    "title": "Job History",
    "section": "",
    "text": "Code\nif (nrow(history_data) &gt; 0) {\n  # Create timeline plot\n  p_timeline &lt;- history_data %&gt;%\n    ggplot(aes(x = timestamp, y = job_name, color = status)) +\n    geom_point(aes(size = duration/60), alpha = 0.7) +\n    scale_color_manual(\n      values = c(\n        \"completed\" = \"#4caf50\",\n        \"failed\" = \"#f44336\", \n        \"running\" = \"#2196f3\",\n        \"waiting\" = \"#9e9e9e\"\n      )\n    ) +\n    scale_size_continuous(name = \"Duration (min)\", range = c(2, 8)) +\n    theme_minimal() +\n    theme(\n      axis.text.y = element_text(size = 10),\n      legend.position = \"bottom\"\n    ) +\n    labs(\n      title = \"Job Execution Timeline\",\n      x = \"Time\",\n      y = \"Job Name\",\n      color = \"Status\"\n    )\n  \n  ggplotly(p_timeline, tooltip = c(\"x\", \"y\", \"colour\", \"size\"))\n} else {\n  cat(\"No historical data to display timeline.\\n\")\n}\n\n\nNo historical data to display timeline."
  },
  {
    "objectID": "history.html#daily-job-summary",
    "href": "history.html#daily-job-summary",
    "title": "Job History",
    "section": "",
    "text": "Code\nif (nrow(history_data) &gt; 0) {\n  # Daily aggregation\n  daily_summary &lt;- history_data %&gt;%\n    group_by(date_recorded, job_name) %&gt;%\n    summarise(\n      total_runs = n(),\n      successful_runs = sum(status == \"completed\"),\n      failed_runs = sum(status == \"failed\"),\n      avg_duration = round(mean(duration, na.rm = TRUE) / 60, 2),\n      success_rate = round(successful_runs / total_runs * 100, 1),\n      .groups = 'drop'\n    )\n  \n  # Success rate over time\n  p_success &lt;- daily_summary %&gt;%\n    ggplot(aes(x = date_recorded, y = success_rate, color = job_name)) +\n    geom_line(size = 1) +\n    geom_point(aes(size = total_runs)) +\n    scale_y_continuous(limits = c(0, 100)) +\n    theme_minimal() +\n    labs(\n      title = \"Job Success Rate Over Time\",\n      x = \"Date\",\n      y = \"Success Rate (%)\",\n      color = \"Job Name\",\n      size = \"Total Runs\"\n    )\n  \n  ggplotly(p_success, tooltip = c(\"x\", \"y\", \"colour\", \"size\"))\n}"
  },
  {
    "objectID": "history.html#performance-trends",
    "href": "history.html#performance-trends",
    "title": "Job History",
    "section": "",
    "text": "Code\nif (nrow(history_data) &gt; 0) {\n  # Duration trends\n  p_duration &lt;- history_data %&gt;%\n    filter(status %in% c(\"completed\", \"failed\")) %&gt;%\n    ggplot(aes(x = timestamp, y = duration/60, color = job_name)) +\n    geom_point(alpha = 0.6) +\n    geom_smooth(method = \"loess\", se = FALSE) +\n    theme_minimal() +\n    labs(\n      title = \"Job Duration Trends\",\n      x = \"Time\",\n      y = \"Duration (minutes)\",\n      color = \"Job Name\"\n    )\n  \n  ggplotly(p_duration, tooltip = c(\"x\", \"y\", \"colour\"))\n}"
  },
  {
    "objectID": "history.html#historical-statistics-table",
    "href": "history.html#historical-statistics-table",
    "title": "Job History",
    "section": "",
    "text": "Code\nif (nrow(history_data) &gt; 0) {\n  # Comprehensive statistics\n  stats_summary &lt;- history_data %&gt;%\n    group_by(job_name) %&gt;%\n    summarise(\n      total_executions = n(),\n      successful = sum(status == \"completed\"),\n      failed = sum(status == \"failed\"),\n      success_rate = round(successful / total_executions * 100, 1),\n      avg_duration = round(mean(duration, na.rm = TRUE) / 60, 2),\n      min_duration = round(min(duration, na.rm = TRUE) / 60, 2),\n      max_duration = round(max(duration, na.rm = TRUE) / 60, 2),\n      first_run = min(timestamp, na.rm = TRUE),\n      last_run = max(timestamp, na.rm = TRUE),\n      .groups = 'drop'\n    ) %&gt;%\n    mutate(\n      first_run = format(first_run, \"%Y-%m-%d %H:%M\"),\n      last_run = format(last_run, \"%Y-%m-%d %H:%M\")\n    ) %&gt;%\n    rename(\n      \"Job Name\" = job_name,\n      \"Total Runs\" = total_executions,\n      \"Successful\" = successful,\n      \"Failed\" = failed,\n      \"Success Rate (%)\" = success_rate,\n      \"Avg Duration (min)\" = avg_duration,\n      \"Min Duration (min)\" = min_duration,\n      \"Max Duration (min)\" = max_duration,\n      \"First Run\" = first_run,\n      \"Last Run\" = last_run\n    )\n  \n  DT::datatable(\n    stats_summary,\n    caption = \"Historical Job Statistics\",\n    options = list(\n      pageLength = 10,\n      scrollX = TRUE,\n      columnDefs = list(\n        list(className = 'dt-center', targets = '_all')\n      )\n    ),\n    rownames = FALSE\n  ) %&gt;%\n    DT::formatStyle(\n      'Success Rate (%)',\n      backgroundColor = DT::styleInterval(\n        cuts = c(80, 95),\n        values = c('#ffebee', '#fff3e0', '#e8f5e8')\n      )\n    )\n}"
  },
  {
    "objectID": "history.html#recent-activity-log",
    "href": "history.html#recent-activity-log",
    "title": "Job History",
    "section": "",
    "text": "Code\nif (nrow(history_data) &gt; 0) {\n  # Show last 50 job executions\n  recent_activity &lt;- history_data %&gt;%\n    arrange(desc(timestamp)) %&gt;%\n    head(50) %&gt;%\n    mutate(\n      duration_formatted = format_duration(duration),\n      timestamp_formatted = format(timestamp, \"%Y-%m-%d %H:%M:%S\")\n    ) %&gt;%\n    select(\n      \"Job Name\" = job_name,\n      \"Status\" = status,\n      \"Timestamp\" = timestamp_formatted,\n      \"Duration\" = duration_formatted,\n      \"Progress (%)\" = progress\n    )\n  \n  DT::datatable(\n    recent_activity,\n    caption = \"Recent Job Executions (Last 50)\",\n    options = list(\n      pageLength = 15,\n      order = list(list(2, 'desc')),  # Sort by timestamp descending\n      columnDefs = list(\n        list(className = 'dt-center', targets = '_all')\n      )\n    ),\n    rownames = FALSE\n  ) %&gt;%\n    DT::formatStyle(\n      'Status',\n      backgroundColor = DT::styleEqual(\n        c('completed', 'running', 'failed', 'waiting'),\n        c('#e8f5e8', '#e3f2fd', '#ffebee', '#f5f5f5')\n      )\n    )\n} else {\n  cat(\"No recent activity to display.\\n\")\n}\n\n\nNo recent activity to display.\n\n\n\nPage last updated: 2025-08-22 12:32:09.291364"
  },
  {
    "objectID": "index.html#job-status",
    "href": "index.html#job-status",
    "title": "Mosquito Alert Model Monitor",
    "section": "Job Status",
    "text": "Job Status"
  }
]