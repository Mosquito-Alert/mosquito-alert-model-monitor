[
  {
    "objectID": "jobs.html",
    "href": "jobs.html",
    "title": "Job Details",
    "section": "",
    "text": "This page provides detailed analysis and configuration information for all monitored jobs.\n\n\nFound 11 jobs with status data\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPage last updated: 2025-08-23 12:41:14.716899"
  },
  {
    "objectID": "jobs.html#log-analysis",
    "href": "jobs.html#log-analysis",
    "title": "Job Details",
    "section": "",
    "text": "Page last updated: 2025-08-23 12:41:14.716899"
  },
  {
    "objectID": "ROBUSTNESS_GUIDE.html",
    "href": "ROBUSTNESS_GUIDE.html",
    "title": "Dashboard Robustness Implementation Guide",
    "section": "",
    "text": "The current dashboard integration is fragile and can cause critical job failures when git operations fail due to merge conflicts or repository state issues.\n\n\n\n\n\nReplace the current status update calls in your project scripts with the robust version:\n\n\n# This can fail and crash your job\n./scripts/update_job_status.sh \"job_name\" \"status\" 120 75\n\n\n\n# This NEVER fails - always exits successfully\n~/research/mosquito-alert-model-monitor/scripts/robust_status_update.sh \"job_name\" \"status\" 120 75 \"log message\"\n\n\n\n\nSet up a cron job to sync the dashboard every 10 minutes, independent of your critical jobs:\n# Add to your crontab\n*/10 * * * * ~/research/mosquito-alert-model-monitor/scripts/sync_dashboard_cron.sh\nThis ensures the dashboard stays updated even if individual jobs can’t push to git.\n\n\n\nFor each monitored project, update the scripts to use the robust approach:\n\n\n# Replace existing update_job_status.sh calls with:\n~/research/mosquito-alert-model-monitor/scripts/robust_status_update.sh \"prepare_malert_data\" \"running\" $(($(date +%s) - $SCRIPT_START_TIME)) 50 \"Processing reports\"\n\n# At the end, use the enhanced push script:\n~/research/mosquito-alert-model-monitor/scripts/collect_logs.sh ~/research/mosquito-alert-model-monitor mosquito_model_data_prep ~/research/mosquito_model_data_prep/logs\n~/research/mosquito-alert-model-monitor/scripts/failsafe_git_update.sh ~/research/mosquito-alert-model-monitor prepare_malert_data completed\n\n\n\n\n\nCombine both approaches for maximum reliability:\n\nJobs use robust status updates (never fail)\nCron job syncs dashboard (regular updates)\nManual sync available (troubleshooting)\n\n\n\n\n\n\n\nModify prepare_malert_data.sh:\n\n# Replace all calls to ./scripts/update_job_status.sh with:\nSTATUS_SCRIPT=\"$HOME/research/mosquito-alert-model-monitor/scripts/robust_status_update.sh\"\n\n# Throughout the script:\n$STATUS_SCRIPT \"prepare_malert_data\" \"running\" $(($(date +%s) - $SCRIPT_START_TIME)) 25 \"Downloading data\"\n$STATUS_SCRIPT \"prepare_malert_data\" \"running\" $(($(date +%s) - $SCRIPT_START_TIME)) 50 \"Processing reports\" \n# ... etc\n\n# At the end:\n$STATUS_SCRIPT \"prepare_malert_data\" \"completed\" $(($(date +%s) - $SCRIPT_START_TIME)) 100 \"Pipeline completed\"\n\n# Collect logs and sync (but don't fail if it doesn't work)\n$HOME/research/mosquito-alert-model-monitor/scripts/collect_logs.sh \"\" \"mosquito_model_data_prep\" || true\n$HOME/research/mosquito-alert-model-monitor/scripts/failsafe_git_update.sh || true\n\n\n\nAdd to your cluster crontab:\n# Dashboard sync every 10 minutes\n*/10 * * * * ~/research/mosquito-alert-model-monitor/scripts/sync_dashboard_cron.sh\n\n# Log collection every 30 minutes\n*/30 * * * * ~/research/mosquito-alert-model-monitor/scripts/collect_logs.sh \"\" \"mosquito_model_data_prep\"\n*/30 * * * * ~/research/mosquito-alert-model-monitor/scripts/collect_logs.sh \"\" \"weather\"\n\n\n\n# Test that status updates never fail\n~/research/mosquito-alert-model-monitor/scripts/robust_status_update.sh \"test_job\" \"running\" 60 50 \"Testing robustness\"\necho \"Exit code: $?\"  # Should always be 0\n\n# Test log collection\n~/research/mosquito-alert-model-monitor/scripts/collect_logs.sh \"\" \"mosquito_model_data_prep\"\n\n# Test cron sync\n~/research/mosquito-alert-model-monitor/scripts/sync_dashboard_cron.sh\n\n\n\n\n✅ Critical jobs NEVER fail due to dashboard issues\n✅ Dashboard stays updated via cron jobs\n✅ Git conflicts handled automatically with retries and fallbacks\n✅ Log files accessible via web interface\n✅ Manual override available for troubleshooting\n✅ Backward compatible with existing setup\n\n\n\n\nIMMEDIATE: Update prepare_malert_data.sh to use robust status updates\nHIGH: Set up cron jobs for dashboard sync\nMEDIUM: Update other project integrations\nLOW: Enhance log viewing and history pages\n\n\n\n\n\nThe robust scripts always exit with code 0 to prevent job failures\nGit operations include retries and conflict resolution\nLog collection is optional and won’t break jobs if it fails\nDashboard updates are “best effort” - job completion is the priority\nManual sync is always available as a fallback\n\nThis approach ensures your critical data processing jobs will NEVER fail due to dashboard integration issues, while still providing comprehensive monitoring when possible."
  },
  {
    "objectID": "ROBUSTNESS_GUIDE.html#problem-summary",
    "href": "ROBUSTNESS_GUIDE.html#problem-summary",
    "title": "Dashboard Robustness Implementation Guide",
    "section": "",
    "text": "The current dashboard integration is fragile and can cause critical job failures when git operations fail due to merge conflicts or repository state issues."
  },
  {
    "objectID": "ROBUSTNESS_GUIDE.html#robust-solutions-implemented",
    "href": "ROBUSTNESS_GUIDE.html#robust-solutions-implemented",
    "title": "Dashboard Robustness Implementation Guide",
    "section": "",
    "text": "Replace the current status update calls in your project scripts with the robust version:\n\n\n# This can fail and crash your job\n./scripts/update_job_status.sh \"job_name\" \"status\" 120 75\n\n\n\n# This NEVER fails - always exits successfully\n~/research/mosquito-alert-model-monitor/scripts/robust_status_update.sh \"job_name\" \"status\" 120 75 \"log message\"\n\n\n\n\nSet up a cron job to sync the dashboard every 10 minutes, independent of your critical jobs:\n# Add to your crontab\n*/10 * * * * ~/research/mosquito-alert-model-monitor/scripts/sync_dashboard_cron.sh\nThis ensures the dashboard stays updated even if individual jobs can’t push to git.\n\n\n\nFor each monitored project, update the scripts to use the robust approach:\n\n\n# Replace existing update_job_status.sh calls with:\n~/research/mosquito-alert-model-monitor/scripts/robust_status_update.sh \"prepare_malert_data\" \"running\" $(($(date +%s) - $SCRIPT_START_TIME)) 50 \"Processing reports\"\n\n# At the end, use the enhanced push script:\n~/research/mosquito-alert-model-monitor/scripts/collect_logs.sh ~/research/mosquito-alert-model-monitor mosquito_model_data_prep ~/research/mosquito_model_data_prep/logs\n~/research/mosquito-alert-model-monitor/scripts/failsafe_git_update.sh ~/research/mosquito-alert-model-monitor prepare_malert_data completed"
  },
  {
    "objectID": "ROBUSTNESS_GUIDE.html#hybrid-approach-best-practice",
    "href": "ROBUSTNESS_GUIDE.html#hybrid-approach-best-practice",
    "title": "Dashboard Robustness Implementation Guide",
    "section": "",
    "text": "Combine both approaches for maximum reliability:\n\nJobs use robust status updates (never fail)\nCron job syncs dashboard (regular updates)\nManual sync available (troubleshooting)"
  },
  {
    "objectID": "ROBUSTNESS_GUIDE.html#implementation-steps",
    "href": "ROBUSTNESS_GUIDE.html#implementation-steps",
    "title": "Dashboard Robustness Implementation Guide",
    "section": "",
    "text": "Modify prepare_malert_data.sh:\n\n# Replace all calls to ./scripts/update_job_status.sh with:\nSTATUS_SCRIPT=\"$HOME/research/mosquito-alert-model-monitor/scripts/robust_status_update.sh\"\n\n# Throughout the script:\n$STATUS_SCRIPT \"prepare_malert_data\" \"running\" $(($(date +%s) - $SCRIPT_START_TIME)) 25 \"Downloading data\"\n$STATUS_SCRIPT \"prepare_malert_data\" \"running\" $(($(date +%s) - $SCRIPT_START_TIME)) 50 \"Processing reports\" \n# ... etc\n\n# At the end:\n$STATUS_SCRIPT \"prepare_malert_data\" \"completed\" $(($(date +%s) - $SCRIPT_START_TIME)) 100 \"Pipeline completed\"\n\n# Collect logs and sync (but don't fail if it doesn't work)\n$HOME/research/mosquito-alert-model-monitor/scripts/collect_logs.sh \"\" \"mosquito_model_data_prep\" || true\n$HOME/research/mosquito-alert-model-monitor/scripts/failsafe_git_update.sh || true\n\n\n\nAdd to your cluster crontab:\n# Dashboard sync every 10 minutes\n*/10 * * * * ~/research/mosquito-alert-model-monitor/scripts/sync_dashboard_cron.sh\n\n# Log collection every 30 minutes\n*/30 * * * * ~/research/mosquito-alert-model-monitor/scripts/collect_logs.sh \"\" \"mosquito_model_data_prep\"\n*/30 * * * * ~/research/mosquito-alert-model-monitor/scripts/collect_logs.sh \"\" \"weather\"\n\n\n\n# Test that status updates never fail\n~/research/mosquito-alert-model-monitor/scripts/robust_status_update.sh \"test_job\" \"running\" 60 50 \"Testing robustness\"\necho \"Exit code: $?\"  # Should always be 0\n\n# Test log collection\n~/research/mosquito-alert-model-monitor/scripts/collect_logs.sh \"\" \"mosquito_model_data_prep\"\n\n# Test cron sync\n~/research/mosquito-alert-model-monitor/scripts/sync_dashboard_cron.sh"
  },
  {
    "objectID": "ROBUSTNESS_GUIDE.html#benefits-of-this-approach",
    "href": "ROBUSTNESS_GUIDE.html#benefits-of-this-approach",
    "title": "Dashboard Robustness Implementation Guide",
    "section": "",
    "text": "✅ Critical jobs NEVER fail due to dashboard issues\n✅ Dashboard stays updated via cron jobs\n✅ Git conflicts handled automatically with retries and fallbacks\n✅ Log files accessible via web interface\n✅ Manual override available for troubleshooting\n✅ Backward compatible with existing setup"
  },
  {
    "objectID": "ROBUSTNESS_GUIDE.html#migration-priority",
    "href": "ROBUSTNESS_GUIDE.html#migration-priority",
    "title": "Dashboard Robustness Implementation Guide",
    "section": "",
    "text": "IMMEDIATE: Update prepare_malert_data.sh to use robust status updates\nHIGH: Set up cron jobs for dashboard sync\nMEDIUM: Update other project integrations\nLOW: Enhance log viewing and history pages"
  },
  {
    "objectID": "ROBUSTNESS_GUIDE.html#important-notes",
    "href": "ROBUSTNESS_GUIDE.html#important-notes",
    "title": "Dashboard Robustness Implementation Guide",
    "section": "",
    "text": "The robust scripts always exit with code 0 to prevent job failures\nGit operations include retries and conflict resolution\nLog collection is optional and won’t break jobs if it fails\nDashboard updates are “best effort” - job completion is the priority\nManual sync is always available as a fallback\n\nThis approach ensures your critical data processing jobs will NEVER fail due to dashboard integration issues, while still providing comprehensive monitoring when possible."
  },
  {
    "objectID": "MACHINE_INTEGRATION_SPEC.html#integration_metadata",
    "href": "MACHINE_INTEGRATION_SPEC.html#integration_metadata",
    "title": "MACHINE_INTEGRATION_SPEC.md",
    "section": "INTEGRATION_METADATA",
    "text": "INTEGRATION_METADATA\ndashboard_repo: \"mosquito-alert-model-monitor\"\ndashboard_path: \"$HOME/research/mosquito-alert-model-monitor\"\nintegration_version: \"2.0_robust\"\ncompatible_with: [\"bash\", \"python\", \"R\", \"SLURM\"]"
  },
  {
    "objectID": "MACHINE_INTEGRATION_SPEC.html#required_files_in_dashboard",
    "href": "MACHINE_INTEGRATION_SPEC.html#required_files_in_dashboard",
    "title": "MACHINE_INTEGRATION_SPEC.md",
    "section": "REQUIRED_FILES_IN_DASHBOARD",
    "text": "REQUIRED_FILES_IN_DASHBOARD\nscripts_needed:\n  - \"scripts/update_job_status.sh\"           # Main status update (robust version)\n  - \"scripts/update_job_status_and_push.sh\"  # Alternative name (same file)\n  - \"scripts/collect_logs.sh\"                # Log collection\n  - \"scripts/slurm_dashboard_sync.sh\"        # SLURM cron sync\n  \ndirectories_needed:\n  - \"data/status/\"    # Status JSON files\n  - \"data/history/\"   # Historical job data  \n  - \"data/details/\"   # Log excerpts\n  - \"logs/\"          # Dashboard sync logs"
  },
  {
    "objectID": "MACHINE_INTEGRATION_SPEC.html#project_integration_pattern",
    "href": "MACHINE_INTEGRATION_SPEC.html#project_integration_pattern",
    "title": "MACHINE_INTEGRATION_SPEC.md",
    "section": "PROJECT_INTEGRATION_PATTERN",
    "text": "PROJECT_INTEGRATION_PATTERN\n\nSTEP_1_IDENTIFICATION\nidentify_in_project:\n  main_script_patterns: [\"*.sh\", \"main.py\", \"run_*.py\", \"process_*.sh\"]\n  existing_status_calls: \n    - \"./scripts/update_job_status.sh\"\n    - \"../mosquito-alert-model-monitor/scripts/update_job_status*.sh\"\n  log_directories: [\"logs/\", \"output/\", \"log/\"]\n  schedule_info: [\"crontab\", \"*.sh\", \"README.md\", \"slurm_*.sh\"]\n\n\nSTEP_2_STATUS_INTEGRATION\n# REQUIRED: Replace or add these calls in main project script\n# PATTERN: Call at start, middle (progress updates), and end\n\n# Job start\n~/research/mosquito-alert-model-monitor/scripts/update_job_status.sh \"PROJECT_JOB_NAME\" \"running\" 0 0 \"Job started\"\n\n# Progress updates (throughout script)\n~/research/mosquito-alert-model-monitor/scripts/update_job_status.sh \"PROJECT_JOB_NAME\" \"running\" $ELAPSED_SECONDS $PROGRESS_PERCENT \"Current step description\"\n\n# Job completion (success)\n~/research/mosquito-alert-model-monitor/scripts/update_job_status.sh \"PROJECT_JOB_NAME\" \"completed\" $TOTAL_SECONDS 100 \"Job completed successfully\"\n\n# Job failure (in error handling)\n~/research/mosquito-alert-model-monitor/scripts/update_job_status.sh \"PROJECT_JOB_NAME\" \"failed\" $ELAPSED_SECONDS $PROGRESS_PERCENT \"Error: description\"\n\n\nSTEP_3_LOG_INTEGRATION\n# OPTIONAL: Add at end of main script for log collection\n~/research/mosquito-alert-model-monitor/scripts/collect_logs.sh \"\" \"PROJECT_NAME\" \"PROJECT_LOG_DIR_PATH\"\n\n\nSTEP_4_VARIABLES_TO_REPLACE\nreplacements_needed:\n  PROJECT_JOB_NAME: \n    description: \"Main identifier for this job in dashboard\"\n    examples: [\"prepare_malert_data\", \"weather-forecast\", \"model_training\"]\n    format: \"lowercase_with_underscores_or_hyphens\"\n    \n  PROJECT_NAME:\n    description: \"Short project identifier\"\n    examples: [\"mosquito_model_data_prep\", \"weather\", \"ml_pipeline\"]\n    \n  PROJECT_LOG_DIR_PATH:\n    description: \"Absolute path to project log directory\"\n    examples: [\"$HOME/research/project_name/logs\", \"./logs\", \"/path/to/logs\"]\n    \n  ELAPSED_SECONDS:\n    description: \"Time since job start\"\n    calculation: \"$(($(date +%s) - $START_TIME))\"\n    \n  PROGRESS_PERCENT:\n    description: \"Job completion percentage (0-100)\"\n    examples: [0, 25, 50, 75, 100]\n    \n  TOTAL_SECONDS:\n    description: \"Total job duration at completion\"\n    calculation: \"$(($(date +%s) - $START_TIME))\""
  },
  {
    "objectID": "MACHINE_INTEGRATION_SPEC.html#integration_templates",
    "href": "MACHINE_INTEGRATION_SPEC.html#integration_templates",
    "title": "MACHINE_INTEGRATION_SPEC.md",
    "section": "INTEGRATION_TEMPLATES",
    "text": "INTEGRATION_TEMPLATES\n\nBASH_SCRIPT_TEMPLATE\n#!/bin/bash\n# Add at beginning of main script:\n\n# Dashboard integration setup\nDASHBOARD_SCRIPT=\"$HOME/research/mosquito-alert-model-monitor/scripts/update_job_status.sh\"\nJOB_NAME=\"PROJECT_JOB_NAME\"  # REPLACE WITH ACTUAL JOB NAME\nSTART_TIME=$(date +%s)\n\n# Job start notification\n$DASHBOARD_SCRIPT \"$JOB_NAME\" \"running\" 0 0 \"Starting PROJECT_DESCRIPTION\"\n\n# Add throughout script for progress:\n# $DASHBOARD_SCRIPT \"$JOB_NAME\" \"running\" $(($(date +%s) - $START_TIME)) PROGRESS_PERCENT \"STEP_DESCRIPTION\"\n\n# Example progress calls:\n$DASHBOARD_SCRIPT \"$JOB_NAME\" \"running\" $(($(date +%s) - $START_TIME)) 25 \"Data loading complete\"\n$DASHBOARD_SCRIPT \"$JOB_NAME\" \"running\" $(($(date +%s) - $START_TIME)) 50 \"Processing data\"\n$DASHBOARD_SCRIPT \"$JOB_NAME\" \"running\" $(($(date +%s) - $START_TIME)) 75 \"Generating outputs\"\n\n# At end of script:\n$DASHBOARD_SCRIPT \"$JOB_NAME\" \"completed\" $(($(date +%s) - $START_TIME)) 100 \"Job completed successfully\"\n\n# Optional log collection:\n$HOME/research/mosquito-alert-model-monitor/scripts/collect_logs.sh \"\" \"PROJECT_NAME\" \"./logs\"\n\n\nPYTHON_SCRIPT_TEMPLATE\nimport subprocess\nimport time\nimport sys\n\n# Dashboard integration\nDASHBOARD_SCRIPT = os.path.expanduser(\"~/research/mosquito-alert-model-monitor/scripts/update_job_status.sh\")\nJOB_NAME = \"PROJECT_JOB_NAME\"  # REPLACE WITH ACTUAL JOB NAME\nstart_time = time.time()\n\ndef update_status(status, progress, message):\n    \"\"\"Update job status in dashboard\"\"\"\n    elapsed = int(time.time() - start_time)\n    try:\n        subprocess.run([DASHBOARD_SCRIPT, JOB_NAME, status, str(elapsed), str(progress), message], \n                      check=False, capture_output=True)\n    except:\n        pass  # Never fail the main job due to dashboard issues\n\n# Job start\nupdate_status(\"running\", 0, \"Starting PROJECT_DESCRIPTION\")\n\n# Progress updates throughout code:\nupdate_status(\"running\", 25, \"Data loading complete\")\nupdate_status(\"running\", 50, \"Processing data\")\nupdate_status(\"running\", 75, \"Generating outputs\")\n\n# Job completion\nupdate_status(\"completed\", 100, \"Job completed successfully\")\n\n\nR_SCRIPT_TEMPLATE\n# Dashboard integration for R scripts\ndashboard_script &lt;- \"~/research/mosquito-alert-model-monitor/scripts/update_job_status.sh\"\njob_name &lt;- \"PROJECT_JOB_NAME\"  # REPLACE WITH ACTUAL JOB NAME\nstart_time &lt;- Sys.time()\n\nupdate_status &lt;- function(status, progress, message) {\n  elapsed &lt;- as.integer(difftime(Sys.time(), start_time, units = \"secs\"))\n  tryCatch({\n    system(paste(dashboard_script, job_name, status, elapsed, progress, shQuote(message)), \n           ignore.stdout = TRUE, ignore.stderr = TRUE)\n  }, error = function(e) {\n    # Never fail the main job due to dashboard issues\n  })\n}\n\n# Job start\nupdate_status(\"running\", 0, \"Starting PROJECT_DESCRIPTION\")\n\n# Progress updates throughout code:\nupdate_status(\"running\", 25, \"Data loading complete\")\nupdate_status(\"running\", 50, \"Processing data\") \nupdate_status(\"running\", 75, \"Generating outputs\")\n\n# Job completion\nupdate_status(\"completed\", 100, \"Job completed successfully\")"
  },
  {
    "objectID": "MACHINE_INTEGRATION_SPEC.html#slurm_integration",
    "href": "MACHINE_INTEGRATION_SPEC.html#slurm_integration",
    "title": "MACHINE_INTEGRATION_SPEC.md",
    "section": "SLURM_INTEGRATION",
    "text": "SLURM_INTEGRATION\n# Add to SLURM script headers:\n#SBATCH --job-name=PROJECT_JOB_NAME\n\n# Add after SLURM setup, before main work:\nDASHBOARD_SCRIPT=\"$HOME/research/mosquito-alert-model-monitor/scripts/update_job_status.sh\"\nJOB_NAME=\"PROJECT_JOB_NAME\"\nSTART_TIME=$(date +%s)\n\n$DASHBOARD_SCRIPT \"$JOB_NAME\" \"running\" 0 0 \"SLURM job started (ID: $SLURM_JOB_ID)\"\n\n# Add before exit:\n$DASHBOARD_SCRIPT \"$JOB_NAME\" \"completed\" $(($(date +%s) - $START_TIME)) 100 \"SLURM job completed (ID: $SLURM_JOB_ID)\""
  },
  {
    "objectID": "MACHINE_INTEGRATION_SPEC.html#error_handling_pattern",
    "href": "MACHINE_INTEGRATION_SPEC.html#error_handling_pattern",
    "title": "MACHINE_INTEGRATION_SPEC.md",
    "section": "ERROR_HANDLING_PATTERN",
    "text": "ERROR_HANDLING_PATTERN\n# Robust error handling that doesn't break jobs\nset +e  # Don't exit on dashboard errors\n\n# Wrap main job logic\nmain_job_function() {\n    # Your original job code here\n    return $?\n}\n\n# Call main job with error handling\nif main_job_function; then\n    $DASHBOARD_SCRIPT \"$JOB_NAME\" \"completed\" $(($(date +%s) - $START_TIME)) 100 \"Job completed successfully\"\nelse\n    $DASHBOARD_SCRIPT \"$JOB_NAME\" \"failed\" $(($(date +%s) - $START_TIME)) 50 \"Job failed with error\"\n    exit 1\nfi"
  },
  {
    "objectID": "MACHINE_INTEGRATION_SPEC.html#testing_checklist",
    "href": "MACHINE_INTEGRATION_SPEC.html#testing_checklist",
    "title": "MACHINE_INTEGRATION_SPEC.md",
    "section": "TESTING_CHECKLIST",
    "text": "TESTING_CHECKLIST\nverify_integration:\n  - status_file_created: \"ls -la ~/research/mosquito-alert-model-monitor/data/status/PROJECT_JOB_NAME.json\"\n  - test_script_manually: \"./scripts/test_dashboard_integration.sh\"\n  - check_dashboard_locally: \"open ~/research/mosquito-alert-model-monitor/docs/index.html\"\n  - verify_no_job_failures: \"Run original job and ensure it completes even if dashboard fails\""
  },
  {
    "objectID": "MACHINE_INTEGRATION_SPEC.html#common_project_types",
    "href": "MACHINE_INTEGRATION_SPEC.html#common_project_types",
    "title": "MACHINE_INTEGRATION_SPEC.md",
    "section": "COMMON_PROJECT_TYPES",
    "text": "COMMON_PROJECT_TYPES\n\nDAILY_DATA_PROCESSING\ntypical_pattern:\n  job_name: \"project_daily_process\"\n  schedule: \"Daily via cron\"\n  stages: [\"download\", \"process\", \"upload\", \"cleanup\"]\n  progress_points: [0, 25, 50, 75, 100]\n\n\nMODEL_TRAINING\ntypical_pattern:\n  job_name: \"model_training\"\n  schedule: \"Weekly/Monthly\"\n  stages: [\"data_prep\", \"training\", \"validation\", \"deployment\"]\n  progress_points: [0, 20, 60, 90, 100]\n\n\nDATA_COLLECTION\ntypical_pattern:\n  job_name: \"data_collection\"\n  schedule: \"Hourly/Daily\"\n  stages: [\"fetch\", \"validate\", \"store\", \"backup\"]\n  progress_points: [0, 30, 70, 100]"
  },
  {
    "objectID": "MACHINE_INTEGRATION_SPEC.html#implementation_notes",
    "href": "MACHINE_INTEGRATION_SPEC.html#implementation_notes",
    "title": "MACHINE_INTEGRATION_SPEC.md",
    "section": "IMPLEMENTATION_NOTES",
    "text": "IMPLEMENTATION_NOTES\n\nAll scripts exit with code 0 to prevent job failures\nDashboard updates are “best effort” - job success is priority\nJSON status files use standardized format\nLog collection is optional and safe\nGit operations have timeouts and retries\nSLURM jobs get proper resource allocation\nNo dependencies on external libraries"
  },
  {
    "objectID": "alerts.html",
    "href": "alerts.html",
    "title": "Alerts & Monitoring",
    "section": "",
    "text": "This page provides automated alerts and monitoring for job failures, performance issues, and system status.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPage last updated: 2025-08-23 12:41:09.895567\nNote: This monitoring system provides basic alerting through the dashboard. For production use, consider integrating with external alerting systems (email, Slack, etc.) for immediate notifications."
  },
  {
    "objectID": "alerts.html#alert-configuration",
    "href": "alerts.html#alert-configuration",
    "title": "Alerts & Monitoring",
    "section": "",
    "text": "Page last updated: 2025-08-23 12:41:09.895567\nNote: This monitoring system provides basic alerting through the dashboard. For production use, consider integrating with external alerting systems (email, Slack, etc.) for immediate notifications."
  },
  {
    "objectID": "logs.html",
    "href": "logs.html",
    "title": "Job Logs",
    "section": "",
    "text": "This page provides access to log files and output from monitored jobs. Click on any log file name to view its contents.\n\n\n\n\n\n\n\n\n\n\n&lt;pre id=\"log-content\" style=\"white-space: pre-wrap; max-height: 600px; overflow-y: auto; font-family: monospace; font-size: 12px;\"&gt;&lt;/pre&gt;\n\nClose Log\n\n\n\n\n\n\nFor complete log access from each monitored project:\nmosquito_model_data_prep - Description: Mosquito Alert data preparation pipeline - Local logs: ~/research/mosquito_model_data_prep/logs/ - GitHub logs: View on GitHub\nweather-data-collector-spain - Description: Weather data collection for Spain - Local logs: ~/research/weather-data-collector-spain/logs/ - GitHub logs: View on GitHub\n\n\n\n\n\n\n### Log File Statistics\n\n- **Total log files:** 21\n- **Total size:** 0.1 MB\n- **Most recent:** z5_gmod_post_run_predictions_latest.log\n\n### Error Detection\n\n\n\n\n\n\n\n\n\n\nSince this is a static dashboard, full interactive log viewing requires additional setup. Here are alternative ways to access logs:\n\n\n\nNavigate to the project directories locally\nLog files are typically in logs/ subdirectories\nUse standard text editors or terminal commands (tail, less, etc.)\n\n\n\n\n\nMany projects sync their log directories to GitHub\nUse the GitHub web interface to browse log files\nSearch for specific error patterns using GitHub’s search\n\n\n\n\n\nRecent log excerpts are copied to data/details/\nThese show the last 200 lines of each log file\nUpdated automatically when jobs run\n\n\n\n\nConsider setting up a simple log server that can serve log files over HTTP for easy mobile access."
  },
  {
    "objectID": "logs.html#log-file-viewer",
    "href": "logs.html#log-file-viewer",
    "title": "Job Logs",
    "section": "",
    "text": "&lt;pre id=\"log-content\" style=\"white-space: pre-wrap; max-height: 600px; overflow-y: auto; font-family: monospace; font-size: 12px;\"&gt;&lt;/pre&gt;\n\nClose Log"
  },
  {
    "objectID": "logs.html#project-log-directories",
    "href": "logs.html#project-log-directories",
    "title": "Job Logs",
    "section": "",
    "text": "For complete log access from each monitored project:\nmosquito_model_data_prep - Description: Mosquito Alert data preparation pipeline - Local logs: ~/research/mosquito_model_data_prep/logs/ - GitHub logs: View on GitHub\nweather-data-collector-spain - Description: Weather data collection for Spain - Local logs: ~/research/weather-data-collector-spain/logs/ - GitHub logs: View on GitHub"
  },
  {
    "objectID": "logs.html#log-analysis-summary",
    "href": "logs.html#log-analysis-summary",
    "title": "Job Logs",
    "section": "",
    "text": "### Log File Statistics\n\n- **Total log files:** 21\n- **Total size:** 0.1 MB\n- **Most recent:** z5_gmod_post_run_predictions_latest.log\n\n### Error Detection"
  },
  {
    "objectID": "logs.html#direct-log-access",
    "href": "logs.html#direct-log-access",
    "title": "Job Logs",
    "section": "",
    "text": "Since this is a static dashboard, full interactive log viewing requires additional setup. Here are alternative ways to access logs:\n\n\n\nNavigate to the project directories locally\nLog files are typically in logs/ subdirectories\nUse standard text editors or terminal commands (tail, less, etc.)\n\n\n\n\n\nMany projects sync their log directories to GitHub\nUse the GitHub web interface to browse log files\nSearch for specific error patterns using GitHub’s search\n\n\n\n\n\nRecent log excerpts are copied to data/details/\nThese show the last 200 lines of each log file\nUpdated automatically when jobs run\n\n\n\n\nConsider setting up a simple log server that can serve log files over HTTP for easy mobile access."
  },
  {
    "objectID": "SLURM_SETUP.html",
    "href": "SLURM_SETUP.html",
    "title": "SLURM Cron Job Setup for Dashboard Sync",
    "section": "",
    "text": "Per Sync Job: - Memory: 512MB (very light) - CPU: 1 core - Time: Maximum 5 minutes (typically 30-60 seconds) - Network: Minimal git operations only\nTotal Daily Load: - If run every 15 minutes: 96 jobs/day × 1-2 minutes = ~2-3 hours total CPU time - If run every 30 minutes: 48 jobs/day × 1-2 minutes = ~1-1.5 hours total CPU time\n\n\n\nAdd to your cluster crontab (crontab -e):\n# Dashboard sync every 15 minutes (recommended for active development)\n*/15 * * * * cd ~/research/mosquito-alert-model-monitor && sbatch scripts/slurm_dashboard_sync.sh\n\n# OR: Dashboard sync every 30 minutes (recommended for production)\n*/30 * * * * cd ~/research/mosquito-alert-model-monitor && sbatch scripts/slurm_dashboard_sync.sh\n\n\n\nMINIMAL LOAD - This is extremely lightweight: - Uses same resources as a simple git operation - Runs for only 1-2 minutes typically - No computational processing - Only file I/O and network operations\nComparison: - Your data prep jobs: ~hours of runtime, GBs of memory - Dashboard sync: ~1 minute runtime, 512MB memory\nRecommendation: Start with 15-minute intervals. If you want to reduce load further, change to 30-minute intervals.\n\n\n\nCheck sync job status:\n# View recent sync jobs\nsqueue -u $USER | grep dashboard_sync\n\n# Check sync logs\ntail -50 ~/research/mosquito-alert-model-monitor/logs/dashboard_sync.log\n\n\n\nIf needed, run sync manually:\ncd ~/research/mosquito-alert-model-monitor\nsbatch scripts/slurm_dashboard_sync.sh"
  },
  {
    "objectID": "SLURM_SETUP.html#resource-usage-analysis",
    "href": "SLURM_SETUP.html#resource-usage-analysis",
    "title": "SLURM Cron Job Setup for Dashboard Sync",
    "section": "",
    "text": "Per Sync Job: - Memory: 512MB (very light) - CPU: 1 core - Time: Maximum 5 minutes (typically 30-60 seconds) - Network: Minimal git operations only\nTotal Daily Load: - If run every 15 minutes: 96 jobs/day × 1-2 minutes = ~2-3 hours total CPU time - If run every 30 minutes: 48 jobs/day × 1-2 minutes = ~1-1.5 hours total CPU time"
  },
  {
    "objectID": "SLURM_SETUP.html#recommended-crontab-entry",
    "href": "SLURM_SETUP.html#recommended-crontab-entry",
    "title": "SLURM Cron Job Setup for Dashboard Sync",
    "section": "",
    "text": "Add to your cluster crontab (crontab -e):\n# Dashboard sync every 15 minutes (recommended for active development)\n*/15 * * * * cd ~/research/mosquito-alert-model-monitor && sbatch scripts/slurm_dashboard_sync.sh\n\n# OR: Dashboard sync every 30 minutes (recommended for production)\n*/30 * * * * cd ~/research/mosquito-alert-model-monitor && sbatch scripts/slurm_dashboard_sync.sh"
  },
  {
    "objectID": "SLURM_SETUP.html#load-impact-assessment",
    "href": "SLURM_SETUP.html#load-impact-assessment",
    "title": "SLURM Cron Job Setup for Dashboard Sync",
    "section": "",
    "text": "MINIMAL LOAD - This is extremely lightweight: - Uses same resources as a simple git operation - Runs for only 1-2 minutes typically - No computational processing - Only file I/O and network operations\nComparison: - Your data prep jobs: ~hours of runtime, GBs of memory - Dashboard sync: ~1 minute runtime, 512MB memory\nRecommendation: Start with 15-minute intervals. If you want to reduce load further, change to 30-minute intervals."
  },
  {
    "objectID": "SLURM_SETUP.html#monitoring",
    "href": "SLURM_SETUP.html#monitoring",
    "title": "SLURM Cron Job Setup for Dashboard Sync",
    "section": "",
    "text": "Check sync job status:\n# View recent sync jobs\nsqueue -u $USER | grep dashboard_sync\n\n# Check sync logs\ntail -50 ~/research/mosquito-alert-model-monitor/logs/dashboard_sync.log"
  },
  {
    "objectID": "SLURM_SETUP.html#manual-sync",
    "href": "SLURM_SETUP.html#manual-sync",
    "title": "SLURM Cron Job Setup for Dashboard Sync",
    "section": "",
    "text": "If needed, run sync manually:\ncd ~/research/mosquito-alert-model-monitor\nsbatch scripts/slurm_dashboard_sync.sh"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Mosquito Alert Model Monitor",
    "section": "",
    "text": "Total Jobs: 11\n\n\nRunning: 5\n\n\nCompleted: 5\n\n\nFailed: 1\n\n\n\nLast updated: 2025-08-23 12:58:51"
  },
  {
    "objectID": "index.html#overview",
    "href": "index.html#overview",
    "title": "Mosquito Alert Model Monitor",
    "section": "",
    "text": "Total Jobs: 11\n\n\nRunning: 5\n\n\nCompleted: 5\n\n\nFailed: 1\n\n\n\nLast updated: 2025-08-23 12:58:51"
  },
  {
    "objectID": "index.html#job-status",
    "href": "index.html#job-status",
    "title": "Mosquito Alert Model Monitor",
    "section": "Job Status",
    "text": "Job Status"
  },
  {
    "objectID": "index.html#resource-usage",
    "href": "index.html#resource-usage",
    "title": "Mosquito Alert Model Monitor",
    "section": "Resource Usage",
    "text": "Resource Usage"
  },
  {
    "objectID": "index.html#recent-activity",
    "href": "index.html#recent-activity",
    "title": "Mosquito Alert Model Monitor",
    "section": "Recent Activity",
    "text": "Recent Activity"
  },
  {
    "objectID": "index.html#performance-summary",
    "href": "index.html#performance-summary",
    "title": "Mosquito Alert Model Monitor",
    "section": "Performance Summary",
    "text": "Performance Summary"
  },
  {
    "objectID": "history.html",
    "href": "history.html",
    "title": "Job History",
    "section": "",
    "text": "This page shows historical trends and patterns in job execution over time.\n\n\n**Total Records:** 17 \n**Date Range:** 2025-08-21 to 2025-08-23 \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWarning in RColorBrewer::brewer.pal(n, pal): n too large, allowed maximum for palette Set2 is 8\nReturning the palette you asked for with that many colors\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPage last updated: 2025-08-23 12:41:13.536754"
  },
  {
    "objectID": "history.html#performance-trends",
    "href": "history.html#performance-trends",
    "title": "Job History",
    "section": "",
    "text": "Warning in RColorBrewer::brewer.pal(n, pal): n too large, allowed maximum for palette Set2 is 8\nReturning the palette you asked for with that many colors"
  },
  {
    "objectID": "history.html#recent-activity-log",
    "href": "history.html#recent-activity-log",
    "title": "Job History",
    "section": "",
    "text": "Page last updated: 2025-08-23 12:41:13.536754"
  },
  {
    "objectID": "index.html#quick-navigation",
    "href": "index.html#quick-navigation",
    "title": "Mosquito Alert Model Monitor",
    "section": "📚 Quick Navigation",
    "text": "📚 Quick Navigation\n\n\n\n\n\n\nDocumentation & Resources\n\n\n\n\n📊 Dashboard Pages: Jobs | History | Alerts | Logs\n🛡️ Setup Guides: Robustness Guide | SLURM Setup | Integration API\n🔧 GitHub: Repository | Actions | Issues\n📈 Status:"
  }
]