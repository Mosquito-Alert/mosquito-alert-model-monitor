---
title: "Mosquito Alert Model Monitor"
format: 
  dashboard:
    theme: cosmo
    nav-buttons: [github]
    github: https://github.com/Mosquito-Alert/mosquito-alert-model-monitor
    logo: "assets/mosquito-alert-logo.png"
    scrolling: true
server: shiny
---

```{r}
#| label: setup
#| include: false

library(shiny)
library(DT)
library(plotly)
library(jsonlite)
library(lubridate)
library(dplyr)
library(purrr)
library(stringr)
library(shinydashboard)
library(fresh)
library(htmltools)

# Set up reactive timer for auto-refresh
refresh_interval <- 30000  # 30 seconds

# Function to load job status from JSON files
load_job_status <- function() {
  status_dir <- "data/status"
  if (!dir.exists(status_dir)) {
    return(data.frame())
  }
  
  json_files <- list.files(status_dir, pattern = "*.json", full.names = TRUE)
  
  if (length(json_files) == 0) {
    return(data.frame())
  }
  
  jobs_data <- map_dfr(json_files, function(file) {
    tryCatch({
      data <- fromJSON(file)
      data$last_updated <- file.info(file)$mtime
      data$config_file <- basename(file)
      return(data)
    }, error = function(e) {
      return(NULL)
    })
  })
  
  return(jobs_data)
}

# Function to determine status color
get_status_color <- function(status) {
  case_when(
    status == "running" ~ "blue",
    status == "completed" ~ "green", 
    status == "failed" ~ "red",
    status == "pending" ~ "orange",
    status == "unknown" ~ "gray",
    TRUE ~ "gray"
  )
}

# Function to format duration
format_duration <- function(seconds) {
  if (is.na(seconds)) return("Unknown")
  
  hours <- floor(seconds / 3600)
  minutes <- floor((seconds %% 3600) / 60)
  secs <- seconds %% 60
  
  if (hours > 0) {
    return(sprintf("%02d:%02d:%02d", hours, minutes, secs))
  } else {
    return(sprintf("%02d:%02d", minutes, secs))
  }
}
```

```{r}
#| label: reactive-data
#| context: server

# Auto-refresh data
autoInvalidate <- reactiveTimer(refresh_interval)

jobs_data <- reactive({
  autoInvalidate()
  load_job_status()
})
```

## Overview {.sidebar}

```{r}
#| label: overview-stats

renderUI({
  data <- jobs_data()
  
  if (nrow(data) == 0) {
    return(div(
      h4("No Jobs Configured"),
      p("No job status files found in data/status/")
    ))
  }
  
  total_jobs <- nrow(data)
  running_jobs <- sum(data$status == "running", na.rm = TRUE)
  failed_jobs <- sum(data$status == "failed", na.rm = TRUE)
  completed_jobs <- sum(data$status == "completed", na.rm = TRUE)
  
  div(
    h4("System Overview"),
    tags$hr(),
    
    div(class = "overview-stat",
        h5("Total Jobs"), 
        h3(total_jobs, style = "color: #333; margin: 0;")
    ),
    
    div(class = "overview-stat",
        h5("Running"), 
        h3(running_jobs, style = "color: #007bff; margin: 0;")
    ),
    
    div(class = "overview-stat",
        h5("Completed"), 
        h3(completed_jobs, style = "color: #28a745; margin: 0;")
    ),
    
    div(class = "overview-stat",
        h5("Failed"), 
        h3(failed_jobs, style = "color: #dc3545; margin: 0;")
    ),
    
    tags$hr(),
    p("Last updated:", Sys.time(), style = "font-size: 0.8em; color: #666;"),
    p("Auto-refresh: 30s", style = "font-size: 0.8em; color: #666;")
  )
})
```

## Job Status

```{r}
#| label: job-status-table

renderDT({
  data <- jobs_data()
  
  if (nrow(data) == 0) {
    return(datatable(data.frame(Message = "No job data available")))
  }
  
  # Prepare display data
  display_data <- data %>%
    mutate(
      Status = paste0('<span class="status-badge status-', status, '">', 
                     toupper(status), '</span>'),
      Duration = ifelse(!is.na(duration), format_duration(duration), "Unknown"),
      Progress = ifelse(!is.na(progress), 
                       paste0(progress, "%"), 
                       "Unknown"),
      `Last Updated` = format(last_updated, "%Y-%m-%d %H:%M:%S")
    ) %>%
    select(
      `Job Name` = job_name,
      Status,
      Progress,
      Duration,
      `Start Time` = start_time,
      `Last Updated`,
      `Next Run` = next_scheduled_run
    )
  
  datatable(
    display_data,
    escape = FALSE,
    options = list(
      pageLength = 15,
      dom = 'tip',
      columnDefs = list(
        list(className = 'dt-center', targets = c(1, 2, 3))
      )
    ),
    class = "table table-striped table-hover"
  )
}, server = FALSE)
```

## Resource Usage

```{r}
#| label: resource-usage

renderPlotly({
  data <- jobs_data()
  
  if (nrow(data) == 0 || !"cpu_usage" %in% names(data)) {
    p <- plot_ly() %>%
      add_annotations(
        text = "No resource usage data available",
        showarrow = FALSE,
        x = 0.5, y = 0.5
      ) %>%
      layout(
        xaxis = list(visible = FALSE),
        yaxis = list(visible = FALSE)
      )
    return(p)
  }
  
  # CPU Usage plot
  cpu_plot <- plot_ly(
    data = data,
    x = ~job_name,
    y = ~cpu_usage,
    type = "bar",
    name = "CPU %",
    marker = list(color = "#007bff")
  ) %>%
    layout(
      title = "CPU Usage by Job",
      xaxis = list(title = "Job Name"),
      yaxis = list(title = "CPU Usage (%)", range = c(0, 100)),
      showlegend = FALSE
    )
  
  cpu_plot
})
```

## Recent Activity

```{r}
#| label: recent-activity

renderDT({
  data <- jobs_data()
  
  if (nrow(data) == 0 || !"log_entries" %in% names(data)) {
    return(datatable(data.frame(Message = "No recent activity data available")))
  }
  
  # Extract recent log entries
  recent_logs <- data %>%
    filter(!is.na(log_entries)) %>%
    select(job_name, log_entries, last_updated) %>%
    mutate(
      timestamp = format(last_updated, "%H:%M:%S"),
      message = map_chr(log_entries, function(x) {
        if (is.list(x) && length(x) > 0) {
          return(tail(x, 1)[[1]])
        } else {
          return("No recent activity")
        }
      })
    ) %>%
    select(
      Time = timestamp,
      Job = job_name,
      Message = message
    ) %>%
    arrange(desc(Time))
  
  datatable(
    recent_logs,
    options = list(
      pageLength = 10,
      dom = 't',
      order = list(list(0, 'desc'))
    ),
    class = "table table-sm"
  )
}, server = FALSE)
```

## Performance Trends {.tabset}

### Execution Time

```{r}
#| label: execution-time-trend

renderPlotly({
  # This would need historical data - placeholder for now
  p <- plot_ly() %>%
    add_annotations(
      text = "Historical execution time data will be displayed here",
      showarrow = FALSE,
      x = 0.5, y = 0.5
    ) %>%
    layout(
      title = "Job Execution Time Trends",
      xaxis = list(visible = FALSE),
      yaxis = list(visible = FALSE)
    )
  
  p
})
```

### Success Rate

```{r}
#| label: success-rate-trend

renderPlotly({
  # This would need historical data - placeholder for now
  p <- plot_ly() %>%
    add_annotations(
      text = "Historical success rate data will be displayed here",
      showarrow = FALSE,
      x = 0.5, y = 0.5
    ) %>%
    layout(
      title = "Job Success Rate Trends",
      xaxis = list(visible = FALSE),
      yaxis = list(visible = FALSE)
    )
  
  p
})
```
