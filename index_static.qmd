---
title: "Mosquito Alert Model Monitor"
format: 
  dashboard:
    theme: cosmo
    nav-buttons: [github]
    github: https://github.com/Mosquito-Alert/mosquito-alert-model-monitor
    scrolling: true
execute:
  echo: false
  warning: false
  message: false
---

```{r}
#| label: setup
#| include: false

library(jsonlite)
library(lubridate)
library(dplyr)
library(purrr)
library(DT)
library(plotly)
library(knitr)
library(htmltools)

# Function to load job status from JSON files
load_job_status <- function() {
  status_dir <- "data/status"
  if (!dir.exists(status_dir)) {
    return(data.frame())
  }
  
  json_files <- list.files(status_dir, pattern = "*.json", full.names = TRUE)
  
  if (length(json_files) == 0) {
    return(data.frame())
  }
  
  # Load each file individually and handle missing fields
  jobs_list <- list()
  
  for (i in seq_along(json_files)) {
    tryCatch({
      data <- fromJSON(json_files[i])
      
      # Ensure all required fields exist with defaults
      job_data <- data.frame(
        job_name = data$job_name %||% "unknown",
        status = data$status %||% "unknown",
        start_time = data$start_time %||% Sys.time(),
        end_time = data$end_time %||% NA,
        duration = data$duration %||% 0,
        progress = data$progress %||% 0,
        cpu_usage = data$cpu_usage %||% 0,
        memory_usage = data$memory_usage %||% 0,
        next_scheduled_run = data$next_scheduled_run %||% NA,
        file_modified = file.info(json_files[i])$mtime,
        config_file = basename(json_files[i]),
        stringsAsFactors = FALSE
      )
      
      # Handle log entries
      if (!is.null(data$log_entries) && length(data$log_entries) > 0) {
        job_data$latest_log <- tail(data$log_entries, 1)
      } else {
        job_data$latest_log <- "No logs available"
      }
      
      jobs_list[[i]] <- job_data
      
    }, error = function(e) {
      warning(paste("Error reading", json_files[i], ":", e$message))
    })
  }
  
  if (length(jobs_list) > 0) {
    return(do.call(rbind, jobs_list))
  } else {
    return(data.frame())
  }
}

# Helper function for null coalescing
`%||%` <- function(x, y) if (is.null(x)) y else x

# Load current job data
jobs <- load_job_status()

# Create summary statistics
if (nrow(jobs) > 0) {
  jobs$last_updated <- as.POSIXct(jobs$start_time)
  jobs$status_color <- case_when(
    jobs$status == "completed" ~ "success",
    jobs$status == "running" ~ "info", 
    jobs$status == "failed" ~ "danger",
    TRUE ~ "secondary"
  )
  
  total_jobs <- nrow(jobs)
  completed_jobs <- sum(jobs$status == "completed")
  running_jobs <- sum(jobs$status == "running")
  failed_jobs <- sum(jobs$status == "failed")
} else {
  total_jobs <- completed_jobs <- running_jobs <- failed_jobs <- 0
}
```

## {.sidebar}

**Last Updated:** `r format(Sys.time(), "%Y-%m-%d %H:%M:%S")`

### Job Summary

- **Total Jobs:** `r total_jobs`
- **Completed:** `r completed_jobs`
- **Running:** `r running_jobs`  
- **Failed:** `r failed_jobs`

### Quick Links

- [Job Details](jobs.qmd)
- [History](history.qmd)
- [Alerts](alerts.qmd)

## Overview

### Current Status

```{r}
if (nrow(jobs) > 0) {
  # Create status cards
  status_cards <- map_chr(1:nrow(jobs), function(i) {
    job <- jobs[i, ]
    
    status_icon <- case_when(
      job$status == "completed" ~ "✅",
      job$status == "running" ~ "🔄",
      job$status == "failed" ~ "❌",
      TRUE ~ "⏸️"
    )
    
    duration_text <- if (job$duration > 0) {
      paste0(round(job$duration / 60, 1), " min")
    } else {
      "..."
    }
    
    paste0('<div class="card mb-3">',
           '<div class="card-header">',
           '<h5>', status_icon, ' ', job$job_name, '</h5>',
           '</div>',
           '<div class="card-body">',
           '<p><strong>Status:</strong> ', job$status, '</p>',
           '<p><strong>Progress:</strong> ', job$progress, '%</p>',
           '<p><strong>Duration:</strong> ', duration_text, '</p>',
           '<p><strong>Last Updated:</strong> ', format(job$last_updated, "%Y-%m-%d %H:%M"), '</p>',
           '<div class="progress mb-2">',
           '<div class="progress-bar" role="progressbar" style="width: ', job$progress, '%"></div>',
           '</div>',
           '</div></div>')
  })
  
  HTML(paste(status_cards, collapse = ""))
} else {
  HTML('<div class="alert alert-warning">No job status data found.</div>')
}
```

### Recent Activity

```{r}
if (nrow(jobs) > 0) {
  # Show recent log entries
  recent_logs <- jobs %>%
    select(job_name, status, last_updated, latest_log) %>%
    mutate(
      time_ago = paste(round(as.numeric(difftime(Sys.time(), last_updated, units = "hours")), 1), "hours ago")
    ) %>%
    select(job_name, status, latest_log, time_ago)
  
  DT::datatable(
    recent_logs,
    colnames = c("Job", "Status", "Latest Log", "Time"),
    options = list(
      pageLength = 10,
      dom = 't',
      columnDefs = list(
        list(width = '20%', targets = 0),
        list(width = '15%', targets = 1),
        list(width = '50%', targets = 2),
        list(width = '15%', targets = 3)
      )
    ),
    rownames = FALSE
  )
} else {
  HTML('<div class="alert alert-info">No recent activity to display.</div>')
}
```

## Performance

### Job Status Distribution

```{r}
if (nrow(jobs) > 0) {
  status_summary <- jobs %>%
    count(status) %>%
    mutate(percentage = round(n / sum(n) * 100, 1))
  
  p <- plot_ly(
    status_summary,
    labels = ~status,
    values = ~n,
    type = 'pie',
    textinfo = 'label+percent',
    marker = list(
      colors = c("completed" = "#28a745", "running" = "#17a2b8", "failed" = "#dc3545", "not_run" = "#6c757d")
    )
  ) %>%
    layout(
      title = "Job Status Distribution",
      showlegend = FALSE
    )
  
  p
} else {
  HTML('<div class="alert alert-info">No data available for visualization.</div>')
}
```

### Progress Overview

```{r}
if (nrow(jobs) > 0) {
  progress_data <- jobs %>%
    select(job_name, progress, status) %>%
    mutate(
      progress_color = case_when(
        status == "completed" ~ "#28a745",
        status == "running" ~ "#17a2b8",
        status == "failed" ~ "#dc3545",
        TRUE ~ "#6c757d"
      )
    )
  
  p <- plot_ly(
    progress_data,
    x = ~job_name,
    y = ~progress,
    type = 'bar',
    marker = list(color = ~progress_color),
    text = ~paste(progress, "%"),
    textposition = 'auto'
  ) %>%
    layout(
      title = "Job Progress",
      xaxis = list(title = "Job"),
      yaxis = list(title = "Progress (%)", range = c(0, 100)),
      showlegend = FALSE
    )
  
  p
} else {
  HTML('<div class="alert alert-info">No progress data available.</div>')
}
```
