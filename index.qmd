---
title: "Mosquito Alert Model Monitor"
format: 
  html:
    theme: cosmo
    css: styles.css
    toc: true
    code-fold: true
execute:
  echo: false
  warning: false
  message: false
---

```{r}
#| label: setup
#| include: false

library(DT)
library(plotly)
library(jsonlite)
library(lubridate)
library(dplyr)
library(purrr)
library(stringr)
library(ggplot2)

# Function to load job status from JSON files
load_job_status <- function() {
  status_dir <- "data/status"
  if (!dir.exists(status_dir)) {
    return(data.frame())
  }
  
  json_files <- list.files(status_dir, pattern = "*.json", full.names = TRUE)
  
  if (length(json_files) == 0) {
    return(data.frame())
  }
  
  jobs_data <- map_dfr(json_files, function(file) {
    tryCatch({
      data <- fromJSON(file)
      data$last_updated <- file.info(file)$mtime
      data$config_file <- basename(file)
      return(data)
    }, error = function(e) {
      return(NULL)
    })
  })
  
  return(jobs_data)
}

# Function to determine status color
get_status_color <- function(status) {
  case_when(
    status == "running" ~ "blue",
    status == "completed" ~ "green", 
    status == "failed" ~ "red",
    status == "pending" ~ "orange",
    status == "unknown" ~ "gray",
    TRUE ~ "gray"
  )
}

# Function to format duration
format_duration <- function(seconds) {
  if (is.na(seconds)) return("Unknown")
  
  hours <- floor(seconds / 3600)
  minutes <- floor((seconds %% 3600) / 60)
  secs <- seconds %% 60
  
  if (hours > 0) {
    return(sprintf("%02d:%02d:%02d", hours, minutes, secs))
  } else {
    return(sprintf("%02d:%02d", minutes, secs))
  }
}

# Load current data
jobs_data <- load_job_status()
```

## Overview

```{r}
#| label: overview-stats

if (nrow(jobs_data) == 0) {
  cat("**No Jobs Configured**\n\nNo job status files found in data/status/")
} else {
  total_jobs <- nrow(jobs_data)
  running_jobs <- sum(jobs_data$status == "running", na.rm = TRUE)
  failed_jobs <- sum(jobs_data$status == "failed", na.rm = TRUE)
  completed_jobs <- sum(jobs_data$status == "completed", na.rm = TRUE)
  
  cat("### System Overview\n\n")
  cat("- **Total Jobs:** ", total_jobs, "\n")
  cat("- **Running:** ", running_jobs, "\n") 
  cat("- **Completed:** ", completed_jobs, "\n")
  cat("- **Failed:** ", failed_jobs, "\n\n")
  cat("*Last updated:* ", format(Sys.time(), "%Y-%m-%d %H:%M:%S"), "\n\n")
}
```

## Job Status

```{r}
#| label: job-status-table

if (nrow(jobs_data) == 0) {
  cat("No job data available.")
} else {
  # Prepare display data
  display_data <- jobs_data %>%
    mutate(
      Status = toupper(status),
      Duration = ifelse(!is.na(duration), format_duration(duration), "Unknown"),
      Progress = ifelse(!is.na(progress), 
                       paste0(progress, "%"), 
                       "Unknown"),
      `Last Updated` = format(last_updated, "%Y-%m-%d %H:%M:%S")
    ) %>%
    select(
      `Job Name` = job_name,
      Status,
      Progress,
      Duration,
      `Start Time` = start_time,
      `Last Updated`,
      `Next Run` = next_scheduled_run
    )
  
  DT::datatable(
    display_data,
    options = list(
      pageLength = 15,
      dom = 'tip',
      columnDefs = list(
        list(className = 'dt-center', targets = c(1, 2, 3))
      )
    ),
    class = "table table-striped table-hover"
  )
}
```

## Resource Usage

```{r}
#| label: resource-usage
#| fig-width: 10
#| fig-height: 6

if (nrow(jobs_data) == 0 || !"cpu_usage" %in% names(jobs_data)) {
  cat("No resource usage data available.")
} else {
  # CPU Usage plot
  cpu_plot <- plot_ly(
    data = jobs_data,
    x = ~job_name,
    y = ~cpu_usage,
    type = "bar",
    name = "CPU %",
    marker = list(color = "#007bff")
  ) %>%
    layout(
      title = "CPU Usage by Job",
      xaxis = list(title = "Job Name"),
      yaxis = list(title = "CPU Usage (%)", range = c(0, 100)),
      showlegend = FALSE
    )
  
  cpu_plot
}
```

## Recent Activity

```{r}
#| label: recent-activity

if (nrow(jobs_data) == 0 || !"log_entries" %in% names(jobs_data)) {
  cat("No recent activity data available.")
} else {
  # Extract recent log entries
  recent_logs <- jobs_data %>%
    filter(!is.na(log_entries)) %>%
    select(job_name, log_entries, last_updated) %>%
    mutate(
      timestamp = format(last_updated, "%H:%M:%S"),
      message = map_chr(log_entries, function(x) {
        if (is.list(x) && length(x) > 0) {
          return(tail(x, 1)[[1]])
        } else {
          return("No recent activity")
        }
      })
    ) %>%
    select(
      Time = timestamp,
      Job = job_name,
      Message = message
    ) %>%
    arrange(desc(Time))
  
  DT::datatable(
    recent_logs,
    options = list(
      pageLength = 10,
      dom = 't',
      order = list(list(0, 'desc'))
    ),
    class = "table table-sm"
  )
}
```

## Performance Summary

```{r}
#| label: performance-summary

if (nrow(jobs_data) > 0) {
  # Create performance summary
  performance_summary <- jobs_data %>%
    mutate(
      status_numeric = case_when(
        status == "completed" ~ 1,
        status == "failed" ~ 0,
        TRUE ~ NA_real_
      )
    ) %>%
    group_by(job_name) %>%
    summarise(
      current_status = first(status),
      avg_duration = round(mean(duration, na.rm = TRUE), 1),
      cpu_usage = round(mean(cpu_usage, na.rm = TRUE), 1),
      memory_usage = round(mean(memory_usage, na.rm = TRUE), 1),
      last_updated = max(last_updated, na.rm = TRUE),
      .groups = "drop"
    ) %>%
    arrange(desc(last_updated))
  
  # Display the table
  DT::datatable(
    performance_summary,
    colnames = c(
      "Job Name" = "job_name",
      "Current Status" = "current_status",
      "Avg Duration (s)" = "avg_duration",
      "CPU Usage (%)" = "cpu_usage",
      "Memory (MB)" = "memory_usage",
      "Last Updated" = "last_updated"
    ),
    options = list(
      pageLength = 15,
      dom = 'tip',
      columnDefs = list(
        list(className = 'dt-center', targets = c(1:4))
      )
    ),
    class = "table table-striped table-hover"
  ) %>%
    DT::formatStyle(
      "current_status",
      backgroundColor = DT::styleEqual(
        c("running", "completed", "failed", "pending"),
        c("#d1ecf1", "#d4edda", "#f8d7da", "#fff3cd")
      )
    )
  
} else {
  cat("No performance data available for summary.")
}
```
