---
title: "Mosquito Alert Model Monitor"
format: 
  html:
    theme: cosmo
    css: styles.css
    toc: true
    code-fold: true
execute:
  echo: false
  warning: false
  message: false
---

```{r}
#| label: setup
#| include: false

library(DT)
library(plotly)
library(jsonlite)
library(lubridate)
library(dplyr)
library(purrr)
library(stringr)
library(ggplot2)

# Function to load job status from JSON files
load_job_status <- function() {
  status_dir <- "data/status"
  if (!dir.exists(status_dir)) {
    return(data.frame())
  }
  
  json_files <- list.files(status_dir, pattern = "*.json", full.names = TRUE)
  
  if (length(json_files) == 0) {
    return(data.frame())
  }
  
  # Process each file individually to ensure consistent structure
  jobs_list <- map(json_files, function(file) {
    tryCatch({
      data <- fromJSON(file, simplifyDataFrame = FALSE)
      
      # Create a standardized record with all required fields
      job_record <- list(
        job_name = data$job_name %||% tools::file_path_sans_ext(basename(file)),
        status = data$status %||% "unknown",
        start_time = data$start_time %||% NA_character_,
        end_time = data$end_time %||% NA_character_,
        duration = as.numeric(data$duration %||% NA),
        progress = as.numeric(data$progress %||% NA),
        cpu_usage = as.numeric(data$cpu_usage %||% NA),
        memory_usage = as.numeric(data$memory_usage %||% NA),
        next_scheduled_run = data$next_scheduled_run %||% NA_character_,
        last_error = data$last_error %||% NA_character_,
        last_updated = file.info(file)$mtime,
        config_file = basename(file)
      )
      
      # Handle log_entries as a single string (latest entry)
      if (!is.null(data$log_entries) && length(data$log_entries) > 0) {
        if (is.list(data$log_entries)) {
          job_record$latest_log <- tail(data$log_entries, 1)[[1]]
        } else {
          job_record$latest_log <- as.character(data$log_entries)
        }
      } else {
        job_record$latest_log <- NA_character_
      }
      
      # Handle config as a summary string
      if (!is.null(data$config) && length(data$config) > 0) {
        config_summary <- paste(names(data$config), collapse = ", ")
        job_record$config_summary <- config_summary
      } else {
        job_record$config_summary <- NA_character_
      }
      
      return(job_record)
    }, error = function(e) {
      warning(paste("Error reading", file, ":", e$message))
      return(NULL)
    })
  })
  
  # Remove NULL entries
  jobs_list <- jobs_list[!map_lgl(jobs_list, is.null)]
  
  if (length(jobs_list) == 0) {
    return(data.frame())
  }
  
  # Convert to data frame
  jobs_df <- do.call(rbind, map(jobs_list, function(x) as.data.frame(x, stringsAsFactors = FALSE)))
  
  return(jobs_df)
}

# Function to determine status color
get_status_color <- function(status) {
  case_when(
    status == "running" ~ "blue",
    status == "completed" ~ "green", 
    status == "failed" ~ "red",
    status == "pending" ~ "orange",
    status == "unknown" ~ "gray",
    TRUE ~ "gray"
  )
}

# Function to format duration
format_duration <- function(seconds) {
  # Handle vectors properly
  sapply(seconds, function(s) {
    if (is.na(s)) return("Unknown")
    
    hours <- floor(s / 3600)
    minutes <- floor((s %% 3600) / 60)
    secs <- s %% 60
    
    if (hours > 0) {
      return(sprintf("%02d:%02d:%02d", hours, minutes, secs))
    } else {
      return(sprintf("%02d:%02d", minutes, secs))
    }
  })
}

# Load current data
jobs_data <- load_job_status()
```

## Overview

```{r}
#| label: overview-stats
#| results: asis

if (nrow(jobs_data) == 0) {
  cat("**No Jobs Configured**\n\nNo job status files found in data/status/")
} else {
  total_jobs <- nrow(jobs_data)
  running_jobs <- sum(jobs_data$status == "running", na.rm = TRUE)
  failed_jobs <- sum(jobs_data$status == "failed", na.rm = TRUE)
  completed_jobs <- sum(jobs_data$status == "completed", na.rm = TRUE)
  
  # Create formatted output as HTML
  overview_html <- paste0(
    "<h3>System Overview</h3>\n",
    "<ul>\n",
    "<li><strong>Total Jobs:</strong> ", total_jobs, "</li>\n",
    "<li><strong>Running:</strong> ", running_jobs, "</li>\n",
    "<li><strong>Completed:</strong> ", completed_jobs, "</li>\n",
    "<li><strong>Failed:</strong> ", failed_jobs, "</li>\n",
    "</ul>\n",
    "<p><em>Last updated:</em> ", format(Sys.time(), "%Y-%m-%d %H:%M:%S"), "</p>\n"
  )
  
  cat(overview_html)
}
```
```

## Job Status

```{r}
#| label: job-status-table

if (nrow(jobs_data) == 0) {
  cat("No job data available.")
} else {
  # Prepare display data
  display_data <- jobs_data %>%
    mutate(
      Status = toupper(status),
      Duration = ifelse(!is.na(duration), format_duration(duration), "Unknown"),
      Progress = ifelse(!is.na(progress), 
                       paste0(progress, "%"), 
                       "Unknown"),
      `Last Updated` = format(last_updated, "%Y-%m-%d %H:%M:%S")
    ) %>%
    select(
      `Job Name` = job_name,
      Status,
      Progress,
      Duration,
      `Start Time` = start_time,
      `Last Updated`,
      `Next Run` = next_scheduled_run
    )
  
  DT::datatable(
    display_data,
    options = list(
      pageLength = 15,
      dom = 'tip',
      columnDefs = list(
        list(className = 'dt-center', targets = c(1, 2, 3))
      )
    ),
    class = "table table-striped table-hover"
  )
}
```

## Resource Usage

```{r}
#| label: resource-usage
#| fig-width: 10
#| fig-height: 6

if (nrow(jobs_data) == 0 || !"cpu_usage" %in% names(jobs_data)) {
  cat("No resource usage data available.")
} else {
  # CPU Usage plot
  cpu_plot <- plot_ly(
    data = jobs_data,
    x = ~job_name,
    y = ~cpu_usage,
    type = "bar",
    name = "CPU %",
    marker = list(color = "#007bff")
  ) %>%
    layout(
      title = "CPU Usage by Job",
      xaxis = list(title = "Job Name"),
      yaxis = list(title = "CPU Usage (%)", range = c(0, 100)),
      showlegend = FALSE
    )
  
  cpu_plot
}
```

## Recent Activity

```{r}
#| label: recent-activity

if (nrow(jobs_data) == 0 || !"latest_log" %in% names(jobs_data)) {
  cat("No recent activity data available.")
} else {
  # Extract recent log entries
  recent_logs <- jobs_data %>%
    filter(!is.na(latest_log)) %>%
    select(job_name, latest_log, last_updated) %>%
    mutate(
      timestamp = format(last_updated, "%H:%M:%S"),
      message = latest_log
    ) %>%
    select(
      Time = timestamp,
      Job = job_name,
      Message = message
    ) %>%
    arrange(desc(Time))
  
  DT::datatable(
    recent_logs,
    options = list(
      pageLength = 10,
      dom = 't',
      order = list(list(0, 'desc'))
    ),
    class = "table table-sm"
  )
}
```

## Performance Summary

```{r}
#| label: performance-summary

if (nrow(jobs_data) > 0) {
  # Create performance summary
  performance_summary <- jobs_data %>%
    mutate(
      status_numeric = case_when(
        status == "completed" ~ 1,
        status == "failed" ~ 0,
        TRUE ~ NA_real_
      )
    ) %>%
    group_by(job_name) %>%
    summarise(
      current_status = first(status),
      avg_duration = round(mean(duration, na.rm = TRUE), 1),
      cpu_usage = round(mean(cpu_usage, na.rm = TRUE), 1),
      memory_usage = round(mean(memory_usage, na.rm = TRUE), 1),
      last_updated = max(last_updated, na.rm = TRUE),
      .groups = "drop"
    ) %>%
    arrange(desc(last_updated))
  
  # Display the table
  DT::datatable(
    performance_summary,
    colnames = c(
      "Job Name" = "job_name",
      "Current Status" = "current_status",
      "Avg Duration (s)" = "avg_duration",
      "CPU Usage (%)" = "cpu_usage",
      "Memory (MB)" = "memory_usage",
      "Last Updated" = "last_updated"
    ),
    options = list(
      pageLength = 15,
      dom = 'tip',
      columnDefs = list(
        list(className = 'dt-center', targets = c(1:4))
      )
    ),
    class = "table table-striped table-hover"
  ) %>%
    DT::formatStyle(
      "Current Status",
      backgroundColor = DT::styleEqual(
        c("running", "completed", "failed", "pending"),
        c("#d1ecf1", "#d4edda", "#f8d7da", "#fff3cd")
      )
    )
  
} else {
  cat("No performance data available for summary.")
}
```
# Dashboard updated Thu Aug 21 22:59:56 CEST 2025
