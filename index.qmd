---
title: "Mosquito Alert Model Monitor"
format: 
  html:
    theme: cosmo
    css: styles.css
    toc: true
    code-fold: true
execute:
  echo: false
  warning: false
  message: false
---

```{r}
#| label: setup
#| include: false

library(DT)
library(plotly)
library(jsonlite)
library(lubridate)
library(dplyr)
library(purrr)
library(stringr)
library(ggplot2)

# Source shared functions
source("scripts/dashboard_functions.R")

# Load current data
jobs_data <- load_job_status()
```

## 🎯 **Project Status Overview**

```{r}
#| label: project-status-overview
#| results: asis

if (nrow(jobs_data) == 0) {
  cat('<div class="alert alert-warning" role="alert">')
  cat('<h5>🚀 No Projects Being Tracked</h5>')
  cat('No project status files found. <a href="ROBUSTNESS_GUIDE.html">Follow the integration guide</a> to start monitoring your jobs.')
  cat('</div>')
} else {
  # Get latest status for each unique project
  latest_jobs <- jobs_data %>%
    group_by(job_name) %>%
    slice_max(order_by = last_updated, n = 1) %>%
    ungroup()
  
  total_projects <- nrow(latest_jobs)
  running_projects <- sum(latest_jobs$status == "running", na.rm = TRUE)
  failed_projects <- sum(latest_jobs$status == "failed", na.rm = TRUE)
  completed_projects <- sum(latest_jobs$status == "completed", na.rm = TRUE)
  
  # Compact status cards
  cat('<div class="row mb-3">')
  
  # Total Projects Card
  cat('<div class="col-md-3 mb-2">')
  cat('<div class="card border-primary h-100">')
  cat('<div class="card-body text-center py-2">')
  cat('<h4 class="card-title text-primary mb-1">', total_projects, '</h4>')
  cat('<small class="text-muted">Total Projects</small>')
  cat('</div></div></div>')
  
  # Running Projects Card
  status_class <- if(running_projects > 0) "success" else "secondary"
  cat('<div class="col-md-3 mb-2">')
  cat('<div class="card border-', status_class, ' h-100">')
  cat('<div class="card-body text-center py-2">')
  cat('<h4 class="card-title text-', status_class, ' mb-1">🔄 ', running_projects, '</h4>')
  cat('<small class="text-muted">Running</small>')
  cat('</div></div></div>')
  
  # Completed Projects Card  
  status_class <- if(completed_projects > 0) "info" else "secondary"
  cat('<div class="col-md-3 mb-2">')
  cat('<div class="card border-', status_class, ' h-100">')
  cat('<div class="card-body text-center py-2">')
  cat('<h4 class="card-title text-', status_class, ' mb-1">✅ ', completed_projects, '</h4>')
  cat('<small class="text-muted">Completed</small>')
  cat('</div></div></div>')
  
  # Failed Projects Card
  status_class <- if(failed_projects > 0) "danger" else "secondary"
  cat('<div class="col-md-3 mb-2">')
  cat('<div class="card border-', status_class, ' h-100">')
  cat('<div class="card-body text-center py-2">')
  cat('<h4 class="card-title text-', status_class, ' mb-1">❌ ', failed_projects, '</h4>')
  cat('<small class="text-muted">Failed</small>')
  cat('</div></div></div>')
  
  cat('</div>')
}
```

## 📋 **Current Project Status**

```{r}
#| label: current-project-table

if (nrow(jobs_data) > 0) {
  # Get latest status for each project with more details
  project_status <- jobs_data %>%
    group_by(job_name) %>%
    slice_max(order_by = last_updated, n = 1) %>%
    ungroup() %>%
    arrange(desc(last_updated)) %>%
    select(
      Project = job_name,
      Status = status,
      Progress = progress,
      Runtime = duration,
      `Last Updated` = last_updated
    ) %>%
    mutate(
      Status = case_when(
        Status == "running" ~ "🔄 Running",
        Status == "completed" ~ "✅ Completed", 
        Status == "failed" ~ "❌ Failed",
        TRUE ~ Status
      ),
      Progress = paste0(Progress, "%"),
      Runtime = ifelse(!is.na(Runtime), 
                      paste0(round(Runtime/60, 1), " min"), 
                      "—"),
      `Last Updated` = ifelse(!is.na(`Last Updated`), 
                             format(as.POSIXct(`Last Updated`, tz="UTC"), "%b %d, %H:%M UTC"),
                             "Unknown")
    )
  
  # Create interactive table
  datatable(
    project_status,
    options = list(
      pageLength = 15,
      dom = 't',  # Only show table (no search/pagination for this view)
      columnDefs = list(
        list(className = 'dt-center', targets = c(1, 2, 3, 4))
      )
    ),
    rownames = FALSE,
    class = "table table-striped table-hover table-sm"
  ) %>%
    formatStyle(
      "Status",
      color = styleEqual(
        c("🔄 Running", "✅ Completed", "❌ Failed"),
        c("#0d6efd", "#198754", "#dc3545")
      )
    )
} else {
  cat('<div class="alert alert-info">')
  cat('**No projects being tracked.** Add your first project by calling `update_job_status.sh` from your job scripts.')
  cat('</div>')
}
```

## ⚡ **Quick Actions & Links**

::: {.panel-tabset}

### System Health
```{r}
#| label: system-health
#| results: asis

if (nrow(jobs_data) > 0) {
  # Check for any failed projects that need attention
  latest_jobs <- jobs_data %>%
    group_by(job_name) %>%
    slice_max(order_by = last_updated, n = 1) %>%
    ungroup()
  
  failed_projects <- sum(latest_jobs$status == "failed", na.rm = TRUE)
  
  # Check for long-running jobs (>60 minutes)
  long_running <- latest_jobs %>%
    filter(status == "running" & !is.na(duration) & duration > 3600) %>%
    nrow()
  
  if (failed_projects > 0) {
    cat('<div class="alert alert-danger">⚠️ <strong>', failed_projects, '</strong> project(s) have failed - check the <a href="alerts.html">Alerts page</a> for details</div>')
  }
  
  if (long_running > 0) {
    cat('<div class="alert alert-warning">⏱️ <strong>', long_running, '</strong> project(s) have been running for over 1 hour</div>')
  }
  
  if (failed_projects == 0 && long_running == 0) {
    cat('<div class="alert alert-success">✅ All projects are running normally</div>')
  }
} else {
  cat('<div class="alert alert-info">🚀 No projects configured yet. Start by integrating your first job.</div>')
}
```

### Quick Links
- **📊 Dashboard Pages**: [Jobs](jobs.html) | [History](history.html) | [Alerts](alerts.html) | [Logs](logs.html)
- **🛡️ Setup Guides**: [Robustness Guide](ROBUSTNESS_GUIDE.html) | [SLURM Setup](SLURM_SETUP.html)
- **🔧 GitHub**: [Repository](https://github.com/Mosquito-Alert/mosquito-alert-model-monitor) | [Actions](https://github.com/Mosquito-Alert/mosquito-alert-model-monitor/actions)
- **📈 Status**: [![Dashboard](https://github.com/Mosquito-Alert/mosquito-alert-model-monitor/actions/workflows/deploy-dashboard.yml/badge.svg)](https://github.com/Mosquito-Alert/mosquito-alert-model-monitor/actions)

:::
